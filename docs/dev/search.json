[{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Colors and color functions","text":"unikn package provides colors (e.g., Seeblau) color palettes (e.g., pal_unikn). However, functionality mainly based color-related functions useful beyond colors palettes package. package provides two main functions interacting color palettes: seecol() usecol(). seecol() general-purpose tool seeing (inspecting visualizing) colors color palettes. seecol() function takes two main arguments: pal provides either one multiple color palettes (default pal = \"unikn_all\"); n specifies number desired colors (default n = \"\"). Based input pal, seecol() function distinguishes two modes: . viewing details single color palette (providing one color palette); B. comparing multiple color palettes (providing keyword list-object). usecol() allows using colors color palettes (e.g., creating visualizations) without showing details. usecol() function also takes arguments conveniently manipulating color palettes: pal provides either one multiple color palettes (default pal = pal_unikn); n specifies number desired colors (default n = \"\"); alpha adjusts opacity colors pal (e.g., alpha = .50 medium transparency). Two additional functions allow finding colors similarity name: simcol() allows finding similar colors (given target color, set candidate colors, tolerance threshold(s)); grepal() allows finding colors particular names (.e., colors whose names match pattern regular expression); Finally, auxiliary functions support specific color functions: ac() adjusts color transparency; shades_of() allows creating linear color gradients; newpal() allows defining new color palettes (vectors data frames dedicated color names); demopal() allows illustrating color palettes different types visualizations. rest vignette provides examples details using functions. (See Color recipes vignette examples solving color-related tasks.)","code":""},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"viewing-colors-and-color-palettes-with-seecol","dir":"Articles","previous_headings":"","what":"Viewing colors and color palettes with seecol()","title":"Colors and color functions","text":"behavior seecol() function distinguishes two modes depends input initial pal argument. either shows () details individual color palette, (B) allows comparing multiple color palettes. next two sections address modes turn.","code":""},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"a--viewing-details-of-a-single-color-palette","dir":"Articles","previous_headings":"Viewing colors and color palettes with seecol()","what":"A. Viewing details of a single color palette","title":"Colors and color functions","text":"pal argument seecol() function specifies single color palette, function plots detailed view particular color palette:  detailed overview color palette provides us color names (available), numeric indices (within color palette), HEX values color, RGB values color. color palette contains many colors, HEX RGB values longer printed. However, setting hex rgb  TRUE force shown. Note seecol() also returns color palette shown. Thus, typical workflow comprises seeing particular color palette saving (storing applying later):  Due saving color palette (my_pal) can later use visualization:  Note seecol() invisibly returns color palette. Thus, following plot palette pal_bordeaux without anything else :  following plot assign palette my_pal:","code":"seecol(pal_unikn)  # view details of pal_unikn my_pal <- seecol(pal_unikn_light)  # view details of AND save a color palette barplot(1/sqrt(1:10), col = my_pal)  # use my_pal in a plot seecol(pal_bordeaux) my_pal <- seecol(pal_bordeaux)"},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"b--viewing-and-comparing-multiple-color-palettes","dir":"Articles","previous_headings":"Viewing colors and color palettes with seecol()","what":"B. Viewing and comparing multiple color palettes","title":"Colors and color functions","text":"second mode seecol() invoked providing (list ) multiple color palettes pal argument. case, function allows comparing palettes plotting color vector palette. special keywords within unikn package denote sets color palettes: keywords \"unikn_all\", \"unikn_basic\", pair_all\", \"pref_all\" \"grad_all\" refer University Konstanz color palettes. Calling seecol pal set keywords allows comparing pre-defined sets color palettes: Viewing uni.kn color palettes:  three basic color palettes:  Note, pal_unikn_web pal_unikn_ppt almost identical, differ vibrant colors . three paired color palettes:  preferred colors spectrum respective gradients:  pre-defined color gradients:  See vignette Institutional colors creating color palettes institutions.","code":"seecol(\"unikn_all\")  # all uni.kn color palettes seecol(\"unikn_basic\") seecol(\"pair_all\") seecol(\"pref_all\") seecol(\"grad_all\")"},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"other-seecol-arguments","dir":"Articles","previous_headings":"Viewing colors and color palettes with seecol()","what":"Other seecol() arguments","title":"Colors and color functions","text":"seecol() function provides aesthetic parameters adjusting color palettes plotted: col_brd allows specifying color box borders (shown. Default: col_brd = NULL); lwd_brd allows specifying line width box borders (shown. Default: lwd_brd = NULL); main sub allow replacing default titles custom titles. Examples:","code":"seecol(\"grad_all\", col_brd = \"black\", lwd_brd = .5, main = \"Color gradients (with black borders)\") seecol(pal_seegruen, col_brd = \"white\", lwd_brd = 5, main = \"A color palette (with white borders)\")"},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"using-a-color-palette-with-usecol","dir":"Articles","previous_headings":"","what":"Using a color palette with usecol()","title":"Colors and color functions","text":"usecol() function allows directly using color palette plot (.e., without first viewing ). usecol() corresponds seecol() taking main arguments (pal n). However, purpose using colors specified pal, rather plotting (seeing) , pal argument typically contains one color palette:  Note seecol() usecol() functions quite permissive respect specifying pal argument: particular color palette (e.g., pal_seegruen) can displayed providing (object) also providing name (.e., \"pal_seegruen\") even incomplete object name name (.e., \"seegruen\" seegruen). Hence, following expressions yield result:","code":"# Using a color palette: barplot(1/sqrt(1:11), col = usecol(pal_unikn)) seecol(pal_seegruen) seecol(\"pal_seegruen\") seecol(\"seegruen\") seecol(seegruen)  # issues a warning, but works"},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"customizing-color-palettes","dir":"Articles","previous_headings":"","what":"Customizing color palettes","title":"Colors and color functions","text":"seecol() usecol() functions allow flexible --fly customization color palettes. Specifying value n argument seecol() usecol() allows: specifying subsets colors comparing subsets different palettes n smaller length color palette; extending color palettes comparing different palettes n greater length color palette. Passing vector colors /color palettes allows users create view color palettes. Finally, specifying value alpha (range 0 1) allows controlling transparency color palette(s), higher values alpha corresponding higher transparency (.e., lower opacity).","code":""},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"selecting-subsets","dir":"Articles","previous_headings":"Customizing color palettes","what":"Selecting subsets","title":"Colors and color functions","text":"Using subset colors:   Importantly, using pre-defined color palettes unikn value n smaller length current color palette, usecol seecol select predefined subset colors:","code":"seecol(\"unikn_all\", n = 4) seecol(pal_unikn, 4) barplot(1/sqrt(1:2), col = usecol(pal_seeblau, n = 2)) barplot(1/sqrt(1:3), col = usecol(pal_seeblau, n = 3))"},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"extending-color-palettes","dir":"Articles","previous_headings":"Customizing color palettes","what":"Extending color palettes","title":"Colors and color functions","text":"values n larger number available colors pal, specified color palette extended using ColorRampPalette:  seecol() usecol() allow extending truncating color palettes desired number n colors. instance: Inspecting extended version pal_seeblau (n = 8 colors): Using truncated version pal_bordeaux (n = 3 colors):","code":"seecol(\"unikn_all\", n = 12) seecol(pal_seeblau, n = 8) barplot(1/sqrt(1:9), col = usecol(pal_bordeaux, n = 3))"},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"mixing-colors-and-color-palettes","dir":"Articles","previous_headings":"Customizing color palettes","what":"Mixing colors and color palettes","title":"Colors and color functions","text":"passing vector pal, can concatenate 2 color palettes connect color (: \"white\") midpoint new color palette:  can combine set colors extend palette specifying n argument larger length specified palette:  custom palettes can easily used plot. instance, can define use subset pal_unikn_pair palette follows:   Creating linear color gradients also supported shades_of() function (see ).","code":"seecol(pal = c(rev(pal_petrol), \"white\", pal_bordeaux)) seecol(pal = usecol(c(Karpfenblau, Seeblau, \"gold\"), n = 10)) my_pair <- seecol(pal_unikn_pair, n = 10) # Create data:  dat <- matrix(sample(5:10, size = 10, replace = TRUE), ncol = 5)  # Plot in my_pair colors: barplot(dat, beside = TRUE, col = my_pair)"},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"controlling-transparency","dir":"Articles","previous_headings":"Customizing color palettes","what":"Controlling transparency","title":"Colors and color functions","text":"seecol() usecol() accept alpha argument (range  0  1) controlling transparency color palettes, higher values alpha corresponding lower transparency (.e., higher opacity). Displaying specific color palette medium opacity/transparency:  Setting opacity custom color palette:  Setting opacity comparing multiple color palettes:","code":"seecol(pal_unikn, alpha = 0.5) four_cols <- usecol(c(\"steelblue\", \"gold\", \"firebrick\", \"forestgreen\"), alpha = 2/3)  seecol(four_cols, main = \"Four named colors with added transparency\") seecol(\"grad\", alpha = 0.67, main = \"Seeing transparent color palettes\")"},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"creating-and-comparing-custom-palettes","dir":"Articles","previous_headings":"Customizing color palettes","what":"Creating and comparing custom palettes","title":"Colors and color functions","text":"Suppose want compare newly created color palette existing color palettes. achieve , advanced users can use seecol() function displaying comparing different custom palettes. provided list color palettes input pal argument, seecol() show comparison inputs:  Note unknown color palettes named pal_nn, increasing order. Palettes known seecol() labeled respective names. Labeling custom palettes works setting pal_names argument character vector appropriate length: pal_names argument specified corresponds length color palettes, default names color palettes overwritten pal_names: , can use lower values n truncating/obtaining shorter subsets color palettes:  higher values  n extending color palettes:","code":"# Define 2 palettes:  pal1 <- c(rev(pal_seeblau), \"white\", pal_bordeaux) pal2 <- usecol(c(Karpfenblau, Seeblau, \"gold\"), n = 10)  # Show the my_pair palette from above, the 2 palettes just defined, and 2 pre-defined palettes:   seecol(list(my_pair, pal1, pal2, pal_unikn, pal_unikn_pair)) seecol(list(my_pair, pal1, pal2, pal_unikn, pal_unikn_pair),         pal_names = c(\"my_pair\", \"blue_bord\", \"blue_yell\"),        main = \"Labeling custom color palettes\") seecol(list(my_pair, pal1, pal2, pal_unikn, pal_unikn_pair),         pal_names = c(\"my_pair\", \"blue_bord\", \"blue_yell\", \"blue_black\", \"mix_pair\"),        main = \"Comparing and labeling custom color palettes\") seecol(list(my_pair, pal1, pal2, pal_unikn, pal_unikn_pair), n = 5) seecol(list(my_pair, pal1, pal2, pal_unikn, pal_unikn_pair), n = 15)"},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"finding-colors","dir":"Articles","previous_headings":"","what":"Finding colors","title":"Colors and color functions","text":"Two familiar color search tasks addressed simcol() grepal() functions: simcol() allows searching colors similar given target color grepal() allows searching colors whose names match pattern","code":""},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"finding-similar-colors-with-simcol","dir":"Articles","previous_headings":"Finding colors","what":"Finding similar colors with simcol()","title":"Colors and color functions","text":"Assuming favorite color \"deeppink\", good question : can find similar colors? Given target color, simcol() function searches set colors find return visually similar ones: default, simcol() searches though named R colors colors() (grDevices package), adjusting col_candidates tol arguments allows fine-grained searches:","code":"simcol(\"deeppink\", plot = FALSE) #>     deeppink    deeppink2      maroon1      maroon2   violetred1   violetred2  #>   \"deeppink\"  \"deeppink2\"    \"maroon1\"    \"maroon2\" \"violetred1\" \"violetred2\" simcol(\"deepskyblue\", col_candidates = pal_seeblau, tol = c(50, 50, 100)) #>   deepskyblue      seeblau3      seeblau4      seeblau5  #> \"deepskyblue\"     \"#59C7EB\"     \"#00A9E0\"     \"#008ECE\""},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"finding-color-names-with-grepal","dir":"Articles","previous_headings":"Finding colors","what":"Finding color names with grepal()","title":"Colors and color functions","text":"often search particular color hue (e.g., sort purple), also know particular color named “purple” one want. Instead, like see colors contain keyword “purple” name. grepal() function addresses need:  Note grepal() function allows searching color names regular expressions: default, grepal() searches vector named colors x = colors() (grDevices package) plots results (side effect). However, also allows searching color palettes provided data frames (color names) suppressing visualization (setting plot = FALSE):","code":"grepal(\"purple\")  # get & see 10 names of colors() with \"purple\" in their name #>  [1] \"mediumpurple\"  \"mediumpurple1\" \"mediumpurple2\" \"mediumpurple3\" #>  [5] \"mediumpurple4\" \"purple\"        \"purple1\"       \"purple2\"       #>  [9] \"purple3\"       \"purple4\" length(grepal(\"gr(a|e)y\", plot = FALSE))    # shades of \"gray\" or \"grey\" #> [1] 224 length(grepal(\"^gr(a|e)y\", plot = FALSE))   # shades starting with \"gray\" or \"grey\" #> [1] 204 length(grepal(\"^gr(a|e)y$\", plot = FALSE))  # shades starting and ending with \"gray\" or \"grey\" #> [1] 2 grepal(\"see\", pal_unikn)   # finding \"see\" in (the names of) pal_unikn (as df) #>   seeblau5 seeblau4 seeblau3 seeblau2 seeblau1 seegrau1 seegrau2 seegrau3 #> 1  #008ECE  #00A9E0  #59C7EB  #A6E1F4  #CCEEF9  #E5E5E5  #CCCCCC  #999999 #>   seegrau4 #> 1  #666666 grepal(\"blau\", pal_unikn_pref, plot = FALSE)  # finding \"blau\" in pal_unikn_pref #>   Seeblau Karpfenblau #> 1 #59C7EB     #3E5496"},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"adjusting-transparency-with-ac","dir":"Articles","previous_headings":"Auxiliary color functions","what":"Adjusting transparency with ac()","title":"Colors and color functions","text":"ac() function provides flexible wrapper around adjustcolor() function grDevices package. key functionality allows vectorized col  alpha arguments:  name ac abbreviation “adjust color”, also mnemonic aid providing “air conditioning”.","code":"my_cols <- c(\"black\", \"firebrick\", \"forestgreen\", \"gold\", \"steelblue\") seecol(ac(my_cols, alpha = c(rep(.25, 5), rep(.75, 5))))"},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"creating-color-gradients-with-shades_of","dir":"Articles","previous_headings":"Auxiliary color functions","what":"Creating color gradients with shades_of()","title":"Colors and color functions","text":"seen main usecol() function allows stretching squeezing color palettes thus creating complex color gradients. even simpler way creating linear color gradients provided shades_of() function:  Internally, shades_of() just convenient wrapper special usecol() function. limitation shades_of() allows creating bi-polar color palettes (.e., gradients two colors). final color col_n unspecified, default “white” used (example). contrast, usecol() function allows creating color gradients arbitrary number colors. Thus, following two expressions define bi-polar color palette:","code":"seecol(shades_of(n = 5, col_1 = Karpfenblau), main = \"5 shades of Karpfenblau\") pg_1 <- usecol(c(\"deeppink\", \"gold\"), 5) pg_2 <- shades_of(5, \"deeppink\", \"gold\") all.equal(pg_1, pg_2) #> [1] TRUE  seecol(pg_2, main = \"A bi-polar color gradient\")"},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"defining-color-palettes-with-newpal","dir":"Articles","previous_headings":"Auxiliary color functions","what":"Defining color palettes with newpal()","title":"Colors and color functions","text":"created, combined found beautiful colors, may wish define new color palette. Defining new named color palette allows consistently access apply colors (e.g., series visualizations report publication). newpal() function makes easy define color palettes:  default, newpal() returns new color palette (named) vector. Setting as_df = TRUE returns data frame.","code":"col_flag <- c(\"#000000\", \"#dd0000\", \"#ffce00\")  # source: www.schemecolor.com  flag_de  <- newpal(col = col_flag,                    names = c(\"black\", \"red\", \"gold\"))  seecol(flag_de, main = \"Defining a flag_de color palette\")"},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"illustrating-color-palettes-with-demopal","dir":"Articles","previous_headings":"Auxiliary color functions","what":"Illustrating color palettes with demopal()","title":"Colors and color functions","text":"choosing, creating modifying color palette, usually inspect result seecol(). Alternatively, can use demopal() function use color palette pal visualization. Currently, type argument supports following visualizations: “bar”: bar plot “curve”: plot normal distribution curves (transparency) “mosaic”: mosaic/table plot “polygon”: area/polygon plot “scatter”: scatter plot points (transparency) types demopal() invisibly return (randomly generated) data accept graphical arguments (e.g., col_par alpha), scaling n seed value (reproducible results), well main sub arguments (setting plot titles). functions additionally accept type-specific arguments (e.g., logical beside, horiz, as_prop arguments plot type = \"bar\").  concludes quick tour colors color functions unikn package. hope enable find, design, use beautiful color palettes — spice visualizations vivid flamboyant colors!","code":"demopal(pal = pg_2, type = 3)"},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"resources","dir":"Articles","previous_headings":"","what":"Resources","title":"Colors and color functions","text":"following versions unikn corresponding resources currently available:","code":""},{"path":"https://hneth.github.io/unikn/dev/articles/color_functions.html","id":"vignettes","dir":"Articles","previous_headings":"","what":"Vignettes","title":"Colors and color functions","text":"following vignettes provide instructions examples using unikn colors, color palettes, functions:","code":""},{"path":"https://hneth.github.io/unikn/dev/articles/color_recipes.html","id":"using-colors-in-base-r","dir":"Articles","previous_headings":"","what":"Using colors in base R","title":"Color recipes","text":"Task: Using unikn colors visualizations created base R graphics. creating base R visualizations (e.g., using plot() creating scatterplot), use usecol() function combination color palette (e.g., pal_unikn) col argument:","code":"my_col <- usecol(pal_unikn, alpha = .50)  # with transparency  plot(x = runif(99), y = runif(99), type = \"p\",       pch = 16, cex = 4,      col = my_col,      main = \"99 transparent dots\", axes = FALSE, xlab = NA, ylab = NA)"},{"path":"https://hneth.github.io/unikn/dev/articles/color_recipes.html","id":"using-colors-in-ggplot2","dir":"Articles","previous_headings":"","what":"Using colors in ggplot2","title":"Color recipes","text":"Task: Using unikn colors visualizations created ggplot2 package. using ggplot() function ggplot2 (e.g., creating area plot), use usecol() function defining color palette (desired length transparency) provided values scale_color_manual() scale_fill_manual() functions: Wrap desired color palette usecol() function unikn. Provide palette values ggplot2 functions scale_color_manual() scale_fill_manual().","code":"# 0. Create data: ----   # Example based on https://www.r-graph-gallery.com/137-spring-shapes-data-art/ n <- 50 groups <- 1:n df <- data.frame()  set.seed(3)  for (i in seq(1:30)){   data = data.frame(matrix(0, n, 3))   data[, 1] <- i   data[, 2] <- sample(groups, nrow(data))   data[, 3] <- prop.table(sample(c(rep(0, 100), c(1:n)), nrow(data)))   df = rbind(df, data)}  names(df) <- c(\"X\",\"Group\",\"Y\") df$Group <- as.factor(df$Group)   df <- df[c(2, 1, 3)] df <- df[order(df$X, df$Group) , ] rownames(df) <- NULL  my_data <- df  # 1. Colors: ----   # A. using RColorBrewer:  # library(RColorBrewer)  # cur_col <- brewer.pal(11, \"Paired\")  # cur_col <- colorRampPalette(cur_col)(n) # cur_col <- cur_col[sample(c(1:length(cur_col)), size = length(cur_col))]  # randomize  # B. using unikn colors: library(unikn)  # Mix a color gradient:  cur_col <- usecol(c(Bordeaux, \"white\", Petrol), n = n) # cur_col <- cur_col[sample(c(1:length(cur_col)), size = length(cur_col))]  # randomize  # 2. Plotting: ----   library(ggplot2)  ggplot(my_data, aes(x = X, y = Y, fill = Group)) +    geom_area() +   scale_fill_manual(values = cur_col) +   theme_void() +   theme(legend.position = \"none\")"},{"path":"https://hneth.github.io/unikn/dev/articles/color_recipes.html","id":"viewing-and-comparing-color-palettes","dir":"Articles","previous_headings":"","what":"Viewing and comparing color palettes","title":"Color recipes","text":"Task: Inspect (colors details ) color palette. easily viewing individual color palette (e.g., provided new HCL color palettes hcl.pals()  R), use palette pal argument seecol() function:  Note arguments seecol() function — especially n alpha — can modify palette (ways usecol() function). Task: Compare (colors range ) multiple color palettes. comparing multiple color palettes (e.g., 20 random color palettes hcl.pals()), provide list pal argument seecol() function. instance, let’s create compare set 20 random HCL palettes: Generate random HCL palettes (save list): Use seecol() comparing multiple color palettes:","code":"col_pal <- hcl.colors(10, \"Vik\")  # some color palette  seecol(col_pal)  # see its colors and details # Parameters: n_col <-  8   # colors in each palette n_pal <- 20   # length(hcl.pals()) ptype <- NULL # c(\"diverging\", \"divergingx\", \"qualitative\", \"sequential\")[4]   s_pal <- sample(x = hcl.pals(type = ptype), size = n_pal, replace = FALSE) s_pal <- sort(s_pal)  # Initialize: t_lbl <- paste0(\"See \", n_pal, \" random HCL color palettes (n = \", n_col, \")\")  l_pal <- vector(\"list\", n_pal)  # lists of palettes  # Loop: for (i in 1:n_pal){      l_pal[[i]] <- hcl.colors(n = n_col, palette = s_pal[i])    } seecol(pal = l_pal,         pal_names = s_pal,        col_brd = \"white\", lwd_brd = 1,        main = t_lbl)"},{"path":"https://hneth.github.io/unikn/dev/articles/color_recipes.html","id":"finding-similar-colors","dir":"Articles","previous_headings":"","what":"Finding similar colors","title":"Color recipes","text":"Task: Find color similar given color. Use simcol() function finding (plotting/seeing) similar colors:  simcol() function compares require target color (col_target) set candidate colors (col_candidates, set colors() default). Color similarity defined terms colors’ pair-wise distances RGB values. distance falls tolerance value(s) (tol), corresponding col_candidates shown returned. Thus, increasing tolerance value yields wider range colors:  Specifying vector three tol values compares RGB dimensions order rank. allows fine-grained similarity searches:","code":"simcol(\"forestgreen\") #>    forestgreen    chartreuse4         green4      olivedrab     olivedrab4  #>  \"forestgreen\"  \"chartreuse4\"       \"green4\"    \"olivedrab\"   \"olivedrab4\"  #>     palegreen4   springgreen4  #>   \"palegreen4\" \"springgreen4\" simcol(col_target = \"orange\", col_candidates = pal_unikn_pref, tol = 150) #>    orange     Pinky     Peach    Signal  Bordeaux  #>  \"orange\" \"#E0607E\" \"#FEA090\" \"#EFDC60\" \"#8E2043\" simcol(col_target = Seeblau, tol = c(20, 20, 80)) #>         Seeblau    lightskyblue   lightskyblue2         skyblue        skyblue1  #>       \"#59C7EB\"  \"lightskyblue\" \"lightskyblue2\"       \"skyblue\"      \"skyblue1\"  #>        skyblue2      steelblue1  #>      \"skyblue2\"    \"steelblue1\""},{"path":"https://hneth.github.io/unikn/dev/articles/color_recipes.html","id":"creating-new-color-palettes","dir":"Articles","previous_headings":"","what":"Creating new color palettes","title":"Color recipes","text":"Task: Create new color palette (color names). general steps creating new color palette (dedicated color names) : Choose colors (R color names, RGB/HEX/HCL values, e.g., sites like https://www.schemecolor.com). Define colors  R vector (type character). Define optional color names second R vector (type character). Use newpal() command define new color palette ( R data frame vector). new palette defined, can inspected (seecol()) modified used visualizations (usecol()):  vignette Institutional colors provides additional examples defining color palettes.","code":"# 1. Choose colors: # Google logo colors (from <https://www.schemecolor.com/google-logo-colors.php>)  # 2. Define colors (as vector): color_google <- c(\"#4285f4\", \"#34a853\", \"#fbbc05\", \"#ea4335\")  # 3. Define color names (as vector): names_google <- c(\"blueberry\", \"sea green\", \"selective yellow\", \"cinnabar\")  # 4. Define color palette: pal_google <- newpal(color_google, names_google)  # Inspect color palette: seecol(pal_google,         col_brd = \"white\", lwd_brd = 8,        main = \"Colors of the Google logo\")"},{"path":"https://hneth.github.io/unikn/dev/articles/color_recipes.html","id":"finding-colors-by-name","dir":"Articles","previous_headings":"","what":"Finding colors by name","title":"Color recipes","text":"Task: Find colors matching names pattern (regular expression). additional examples using grepal() function finding colors names (pattern):  Providing list color palettes pal argument seecol() function allows comparing multiple color palettes:  last example illustrates () pattern argument grepal() can use regular expressions, (b) x argument grepal() works vectors data frames (e.g., unikn color palettes). Let’s compare different types “blue”, “orange”, “purple violet” provided grDevices vector named colors() various shades “blau”, “pink”, “peach” “bordeaux” provided unikn color palettes:","code":"# Get color palettes matching a pattern: pal_1 <- grepal(\"orange\", plot = FALSE) pal_2 <- grepal(\"olive\", plot = FALSE) pal_3 <- grepal(\"white\", plot = FALSE)  # See individual palettes: # seecol(pal_1, main = \"Hues of 'orange' colors()\") # seecol(pal_2, main = \"Hues of 'olive' colors()\") seecol(pal_3, main = \"Hues of 'white' colors()\", col_bg = \"grey90\") # See multiple color palettes: seecol(pal = list(pal_1, pal_2, pal_3),         pal_names = c(\"orange\", \"olive\", \"white\"),         col_bg = \"grey90\") # Search colors() with specific patterns (in their names):  blues    <- grepal(\"blue$\", plot = FALSE)   # ending on \"blue\" oranges  <- grepal(\"orange\", plot = FALSE)  # containing \"orange\" purpviol <- grepal(\"purple|violet\", plot = FALSE)  # containing \"purple\" or \"violet\"  # Search unikn palettes for color names:  blaus_1 <- grepal(\"blau\", pal_unikn, plot = FALSE) blaus_2 <- grepal(\"blau\", pal_karpfenblau, plot = FALSE) pinks <- grepal(\"pink\", pal_pinky, plot = FALSE) peach <- grepal(\"peach\", pal_peach, plot = FALSE) baux  <- grepal(\"bordeaux\", pal_bordeaux, plot = FALSE)  # See multiple color palettes:  seecol(list(blues, oranges, purpviol,              c(blaus_1, blaus_2, pinks, peach, baux)),        pal_names = c(\"blues\", \"oranges\", \"purpviol\", \"unikn colors\"),        main =\"Comparing custom color palettes\")"},{"path":"https://hneth.github.io/unikn/dev/articles/color_recipes.html","id":"getting-shades-of-a-color","dir":"Articles","previous_headings":"","what":"Getting shades of a color","title":"Color recipes","text":"Task: Get different shades specific color. shades_of() function returns vector  colors shades (.e., typically lighter darker versions)  initial color . default, shades_of(n) yields n shades ranging col_1 = \"black\" col_n = \"white (.e., n shades grey):  adjusting n, initial color col_1, /final color col_n, can conveniently create simple color ranges: Using alpha range [0;1][0; 1] allows adjusting transparency color gradient:","code":"greys <- shades_of(10) seecol(greys, main = \"10 shades of grey\") seecol(shades_of(4, Seeblau, \"black\"), main = \"4 shades of Seeblau\") seecol(shades_of(5, \"forestgreen\"), main = \"5 shades of 'forestgreen'\") wine_gold <- shades_of(4, Bordeaux, col_n = \"gold\", alpha = .75) seecol(wine_gold, main = \"5 transparent shades from Bordeaux to gold\")"},{"path":"https://hneth.github.io/unikn/dev/articles/color_recipes.html","id":"creating-color-gradients","dir":"Articles","previous_headings":"","what":"Creating color gradients","title":"Color recipes","text":"Task: Creating color gradients. shades_of() function merely convenient wrapper function usecol() function. Using pal argument usecol() allows defining complex color gradients (e.g., specifying two colors). instance, create bi-polar (divergent) color palette, mix two main colors “white” remove middle color:","code":"# Create bi-polar color gradient (and remove 'white' middle color): divergent_gradient <- usecol(pal = c(\"firebrick\", \"white\", \"steelblue\"), n = 7)[-4]  seecol(divergent_gradient, main = \"A bi-polar color palette\")"},{"path":"https://hneth.github.io/unikn/dev/articles/color_recipes.html","id":"resources","dir":"Articles","previous_headings":"","what":"Resources","title":"Color recipes","text":"following versions unikn corresponding resources currently available:","code":""},{"path":"https://hneth.github.io/unikn/dev/articles/color_recipes.html","id":"vignettes","dir":"Articles","previous_headings":"","what":"Vignettes","title":"Color recipes","text":"following vignettes provide instructions examples using unikn colors, color palettes, functions:","code":""},{"path":"https://hneth.github.io/unikn/dev/articles/inst_colors.html","id":"creating-new-color-palettes","dir":"Articles","previous_headings":"","what":"Creating new color palettes","title":"Institutional colors","text":"color palette ordered collection color objects. Creating new color palettes R simple requires two steps: Define palette’s elementary colors R objects. Combine colors color palette. following, illustrate steps. see, Step 1 can either omitted (--combined colors exist R objects) can included Step 2. example, re-create color palette German Max Planck Society (unikn used export mpg_pal, see mpg unicol package) color definitions Corporate Design manual (available ).","code":""},{"path":"https://hneth.github.io/unikn/dev/articles/inst_colors.html","id":"defining-colors","dir":"Articles","previous_headings":"Creating new color palettes","what":"1. Defining colors","title":"Institutional colors","text":"can create new color palette  R, elementary colors need exist R objects. (colors --combined new palette exist R objects, can skip step directly proceed 2. Combining colors palette.) Defining new colors  R requires basic understanding underlying representation. colors represented perceived wide-ranging topic fascinated scholars practitioners centuries. Essentially, many alternative ways analyze synthesize colors, appropriate representational way depends specific context particular use case (see Wikipedia: Color model introduction). R, grDevices package (included default installation) provides colors color-related functions. Although R supports many color models (including HCL, HSV, Lab, Luv, RGB variants), three common ways expressing colors  R : R color name: R includes 657 named colors, whose names provided (character vector) evaluating colors() function grDevices. RGB values: Every color (hue) expressed triple numeric values three dimensions denote additive primary colors (red, green, blue). range values either expressed scale  0  1, — typically — scale  0  255 (.e., 8 bit scale allowing 28=2562^8 = 256 different values). HEX values: Every color (hue) expressed character string (prefix #), followed triple hexadecimal values (ranging  00  FF) correspond triple decimal RGB values (range  0  255). Importantly, color (hue) can denoted name, RGB values, HEX values. Thus, three different systems (.e., color name, RGB values, HEX values) can alternative representations object. However, just properties alphabet numeral notation system constraints words numbers can expressed , universe possible colors limited representation. instance, whereas RGB HEX systems usually distinguish 16 million (.e., (28)3=2563=16.777.216(2^8)^3 = 256^3 = 16.777.216) possible colors, limited number named. Similarly, multiple names refer triple RGB HEX values, denote color.1 example helps clarifying abstract terms. viewing existing color color palette seecol() function unikn, name, HEX RGB values individual colors shown. instance, following color palette mpg_pal provides colors Max Planck Society:  middle color mpg_pal one 657 named colors colors(), R recognize color type name (character object \"white\") context expects color inputs. However, two colors mpg_pal specifically defined Max Planck Society thus pre-defined colors R (.e., contained colors()). use colors  R, first need define color objects. can define new colors R? institutions provide definitions corporate colors instructions can defined standard color system. Unfortunately, definitions (using subtractive CMYK model) aimed printing (opposed computer screens) standards (numeric PANTONE™ PMS codes) proprietary. institutions interest widely disseminating colors, typically include translations approximations alternative color models definitions.  Max Planck Society defines two main colors CD manual (available ): dark shade green defined Pantone 328, approximated CMYK 100/0/57/30 RGB 17/102/86. light shade grey Pantone 427, approximated CMYK 0/0/6/15 RGB 221/222/214. following, first use RGB values define colors (provided definition). However, show alternatively used colors’ HEX values (provided) define color objects.","code":""},{"path":"https://hneth.github.io/unikn/dev/articles/inst_colors.html","id":"defining-colors-from-their-rgb-values","dir":"Articles","previous_headings":"Creating new color palettes > 1. Defining colors","what":"Defining colors from their RGB values","title":"Institutional colors","text":"two colors interest given RGB values, can use rgb() function grDevices package define corresponding objects: first three arguments specify values red, green, blue dimension, respectively. Importantly, values must range [0,max][0, max], maxmax provided maxColorValue = 255. Whereas sRGB standard expresses values normalized range  [0,1][0, 1], color definitions use traditional 8-bit representation distinguish 28=2562^8 = 256 levels range [0,255][0, 255]. rgb() function additionally allows adding names transparency level alpha, can modify aspects later, need use point. obtain evaluate new color objects? Let’s see: evaluating object created rgb(), R returns character sequence form \"#rrggbb\". string, sequence rrggbb expresses three RGB values (red, green, blue dimension, respectively) hexadecimal (HEX) notation (range [0,255][0, 255]). HEX notation, ten numeral symbols (.e., digits  0  9) decimal system extended first six letters alphabet (.e.,  F) turn familiar base-10 notation analogous place-value notation base  16. Thus, HEX values \"#116656\" merely compact way expressing red: 1⋅16+1=171 \\cdot 16 + 1 = 17 green: 6⋅16+6=1026 \\cdot 16 + 6 = 102 blue: 5⋅16+6=865 \\cdot 16 + 6 = 86 Thus, HEX values \"#116656\" provide alternative way expressing RGB values 17/102/86 — refer color “MPG green” (shown mpg_pal[1] ).","code":"mpg_green <- grDevices::rgb( 17, 102,  86, maxColorValue = 255) mpg_grey  <- grDevices::rgb(221, 222, 214, maxColorValue = 255) mpg_green #> [1] \"#116656\" mpg_grey #> [1] \"#DDDED6\""},{"path":"https://hneth.github.io/unikn/dev/articles/inst_colors.html","id":"defining-colors-from-their-hex-values","dir":"Articles","previous_headings":"Creating new color palettes > 1. Defining colors","what":"Defining colors from their HEX values","title":"Institutional colors","text":"equivalence RGB HEX notations can illustrated defining colors second time, time specifying HEX values (returned ): definitions really yield identical R objects, following checks must evaluate TRUE: Thus, can define colors RGB HEX values — two notations really just two alternative ways representing colors.","code":"mpg_green_2 <- \"#116656\" mpg_grey_2  <- \"#DDDED6\" all.equal(mpg_green, mpg_green_2) #> [1] TRUE all.equal(mpg_grey,  mpg_grey_2) #> [1] TRUE"},{"path":"https://hneth.github.io/unikn/dev/articles/inst_colors.html","id":"combining-colors-into-a-palette","dir":"Articles","previous_headings":"Creating new color palettes","what":"2. Combining colors into a palette","title":"Institutional colors","text":"defined two new colors, can easily combine new color palette. color palette simply sequence colors stored sequential data structure. two simplest data structures  R suited purpose vectors data frames. Thus, following two expressions define valid color palettes: often easier remember access colors names, usually makes sense name elements color palette (e.g., using name() function). newpal() function unikn provides convenient wrapper defining color palettes. main argument col uses vector color objects make new palette, whereas names as_df allow specifying color names switching returning new palette vector data base. Importantly, color objects col can provided RGB values, R color names, HEX values: new color palette mpg_pal_3 contains three basic colors mpg_pal (shown ):  5-color palette provided mpg_pal includes two intermediate colors (positions mpg_pal[2] mpg_pal[4]) extrapolated mixing two main MPG colors “white” balanced (50:50) fashion. usecol() function unikn automatically performs extrapolations extending 3-element color palette (e.g., mpg_pal_3) n = 5 colors: resulting color palette my_mpg_pal recreates colors unikn color palette mpg_pal (shown ):  Technically, two color palettes differ names way middle color (“white”) specified (R color name HEX values). However, using col2rgb() converting palettes RGB values, see contain colors: concludes illustration defining new colors color palettes.","code":"c(mpg_green, mpg_grey) #> [1] \"#116656\" \"#DDDED6\" data.frame(mpg_green, mpg_grey) #>   mpg_green mpg_grey #> 1   #116656  #DDDED6 mpg_pal_3 <- newpal(col = c(rgb( 17, 102,  86, maxColorValue = 255), \"white\", \"#DDDED6\"),                     names = c(\"MPG green\", \"white\", \"MPG grey\"),                     as_df = FALSE) seecol(mpg_pal_3,         main = \"My new color palette\", col_brd = \"black\", lwd_brd = .5) my_mpg_pal <- usecol(mpg_pal_3, n = 5) seecol(my_mpg_pal, main = \"My new MPG color palette\",         col_brd = \"black\", lwd_brd = .5) all.equal(col2rgb(mpg_pal), col2rgb(my_mpg_pal), check.attributes = FALSE) #> [1] \"Numeric: lengths (9, 15) differ\""},{"path":"https://hneth.github.io/unikn/dev/articles/inst_colors.html","id":"comparing-color-palettes","dir":"Articles","previous_headings":"","what":"Comparing color palettes","title":"Institutional colors","text":"new palette defined (available current R environment), seecol() usecol() functions allow comparing, scaling, using fashion native unikn color palettes:  See vignette Color recipes additional examples using unikn functions solving color-related tasks.","code":"# Scaled palettes:  seecol(list(mpg_pal, pal_unikn), n = 7,        pal_names = c(\"Max Planck\", \"Uni Konstanz\"),        main = \"Comparing scaled color palettes\")"},{"path":"https://hneth.github.io/unikn/dev/articles/inst_colors.html","id":"call-for-contributions","dir":"Articles","previous_headings":"","what":"Call for contributions","title":"Institutional colors","text":"still expanding range color palettes institutions dedicated R package unicol. Collecting color palettes  using unikn color functions create color palettes? , please let us know (e.g., posting GitHub issue)! collect color palettes institutions make available R users future versions unicol. enable us verify provide credit contributions, please send us following information: code (e.g., newpal() command creating color palette), reference source information (e.g., URL color definitions), name contact information (e.g., Email address). ’re looking forward inputs contributions (GitHub issue)!","code":""},{"path":"https://hneth.github.io/unikn/dev/articles/inst_colors.html","id":"resources","dir":"Articles","previous_headings":"","what":"Resources","title":"Institutional colors","text":"following versions unikn corresponding resources currently available:","code":""},{"path":"https://hneth.github.io/unikn/dev/articles/inst_colors.html","id":"vignettes","dir":"Articles","previous_headings":"","what":"Vignettes","title":"Institutional colors","text":"following vignettes provide instructions examples using unikn colors, color palettes, functions:","code":""},{"path":"https://hneth.github.io/unikn/dev/articles/text_decorations.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Text boxes and decorations","text":"Beyond providing support colors, unikn provides functions plotting graphical elements (like boxes) text decorations (colored backgrounds underlining). illustrating functions, please note caveats: Plotting text (.e., graphically rendering characters) rarely good idea. contrast vector fonts used DTP programs, plotted text typically scale (changing size images) recognized automatically (e.g., copied, indexed, scraped). Hence, following functions used better solutions available (e.g., adding text graphs, obstructing automatic text recognition). Like templates, renderings subject constraints limitations. instance, standard installation R lacks prescribed “Theinhardt” fonts, mimic official design specifications (Arial, sans serif). said, digital decorations can useful emphasize structure information, provided can produced easily flexibly. unikn package helps preventing common mistakes novices (e.g., boxes lines extending beyond text, step-functions multi-line headings) can customized improved expert users. Hence, hope following functions useful plotting graphical elements (e.g., boxes, logos, etc.) help achieve uniform look styling presentations visualizations. Please load unikn package get started:","code":"library(unikn)  # load unikn package"},{"path":"https://hneth.github.io/unikn/dev/articles/text_decorations.html","id":"plotting-empty-slides-and-boxes","dir":"Articles","previous_headings":"","what":"Plotting empty slides and boxes","title":"Text boxes and decorations","text":"text functions unikn add styled text existing plot, must first create plot can add text. unikn provides 2 basic functions creating new plots: slide plots empty canvass (rectangular box frame); xbox plots colored box X top right corner. commands default settings:   functions accept additional arguments customize appearance.","code":"slide()  # plot default slide xbox()  # plot default xbox"},{"path":"https://hneth.github.io/unikn/dev/articles/text_decorations.html","id":"colors","dir":"Articles","previous_headings":"Plotting empty slides and boxes","what":"Colors","title":"Text boxes and decorations","text":"background border colors slides can changed setting col, border, lwd arguments:   Similarly, background color xboxes can changed col argument:","code":"slide(col = pal_seeblau[[1]], border = Petrol, lwd = 5)  # set colors of slide background and border slide(col = pal_peach[[2]], border = NA)  # colored slide without a border xbox(col = Pinky)  # set background color of xbox"},{"path":"https://hneth.github.io/unikn/dev/articles/text_decorations.html","id":"dimensions","dir":"Articles","previous_headings":"Plotting empty slides and boxes","what":"Dimensions","title":"Text boxes and decorations","text":"default, slide xbox fill entire plotting region (.e., margins set 0). width slide set 4/3 height ( 1). change default, use dim argument specifying slide’s x- y-dimensions, respectively:  Note changes slide dimensions invisible viewing images interactively, R automatically scales images size canvass. mostly affect relation metrics adding elements  object. Similarly, xbox default dimensions unit square (.e., dim = c(1, 1)). change default, use dim argument specifying xbox’s x- y-dimensions, respectively:  two strokes  X (top right corner) orthogonal viewing xbox aspect ratio indicated dim (.e., : ratio width x = 1 height y = 2). viewing box different aspect ratio, X appears distorted. Hence, viewing printing plots desired aspect ratio helps creating xbox.","code":"slide(dim = c(3, 1))  # a slide 3x wider than high xbox(col = Petrol, dim  = c(1, 2))  # an xbox 2 times higher than wide"},{"path":"https://hneth.github.io/unikn/dev/articles/text_decorations.html","id":"plotting-styled-text","dir":"Articles","previous_headings":"","what":"Plotting styled text","title":"Text boxes and decorations","text":"three main functions plotting text decorations: mark() allows highlighting text colored background boxes; uline() allows underlining text colored lines; post() allows posting text rectangular xbox elements. addition, 2 auxiliary functions: headline() allows plotting headlines colored background boxes; url_unikn() allows formatting URLs uni.kn way. following sections illustrate functions main options turn.","code":""},{"path":"https://hneth.github.io/unikn/dev/articles/text_decorations.html","id":"mark-text","dir":"Articles","previous_headings":"Plotting styled text","what":"Mark text","title":"Text boxes and decorations","text":"mark() function allows highlighting text plotting colored background boxes (provide functionality “Markieren”):  default, mark() assumes want add highlighted text  existing plot. text labels added provided (character vector) labels argument, coordinates corresponding x  y arguments. Various text decorations (.e., text background colors, text sizes, font types) can set specifying additional arguments (.e., col, col_bg, cex, font, respectively):  pre-existing plot available, setting new_plot argument either \"blank\"  \"slide\" generate new default plot (calling slide() function described ):  Rather providing explicit x y coordinates text elements  labels, calls defined initial coordinate used numeric y_layout argument fix distance consecutive text labels (value  .03). alternative numeric coordinates position values, x_layout y_layout also accept special values (character strings): x_layout accepts: x_layout = \"center\" centering labels horizontally (first label middle), x_layout = \"left\" left-justifies labels (first label middle), x_layout = \"right\" right-justifies labels (first label middle). y_layout accepts: y_layout = \"even\" even distribution labels across available y-space, y_layout = \"flush\" omit space adjacent labels (y_layout = 0). Thus, position orientation text labels can controlled using x_layout y_layout options:  See ?mark details.","code":"# Some pre-existing plot:  n <- 20 set.seed(1) par(mar = c(0, 0, 0, 0)) plot(x = runif(n), y = runif(n), type = \"p\", pch = 16, cex = 20, col = grey(0, .2),      axes = FALSE, xlab = \"\", ylab = \"\")  # Add 1 marked label: mark(labels = \"Some messy plot\", x = .02, y = .9)  # Add 2 more marked labels: mark(labels = c(\"Note something here.\", \"More highlighting here.\"),       x = c(.1, .6), y = c(.2, .4),      col_bg = c(pal_seeblau[[2]], pal_peach[[3]]), cex = 1.2) # A sentence to plot:  s <- c(\"Markieren\",        \"ist ein Bestandteil\",        \"von Studieren.\")  # Create a new plot (of type \"slide\"): mark(labels = s,      x = 0, y = .85, y_layout = .03,      col_bg = Seeblau,      cex = 1.5,      new_plot = \"slide\")  # Add text to the same plot: mark(labels = s,      x = 0, y = .40, y_layout = .03,      col_bg = pal_pinky[[2]],      cex = 1.5,       new_plot = \"none\")"},{"path":"https://hneth.github.io/unikn/dev/articles/text_decorations.html","id":"underline-text","dir":"Articles","previous_headings":"Plotting styled text","what":"Underline text","title":"Text boxes and decorations","text":"uline() function allows emphasizing text plotting colored underlining (provide functionality “Unterstreichen”):  mark() , uline() command distinguishes creating new plot (setting new_plot either \"blank\" “slide”) adding pre-existing plot (using default new_plot = \"none\"):  arguments text elements (labels), text positions (x, y, y_layout), text properties decorations (col, col_bg, cex, font) work mark(). instance, shorter vectors recycled match length labels:  position orientation text labels can controlled using x_layout y_layout options:","code":"lbl_uline <- c(\"This is neat, true, and terribly important\") uline(labels = lbl_uline, new_plot = \"blank\", y = .6, cex = 1.1)  # create a new plot uline(labels = \"(which is why we underline it).\", y = .45, cex = 1)  # add to plot slogan <- c(\"Geradlinig\", \"Farbenfroh\", \"Beweglich\", \"Bunt\", \"Paradiesisch\") uline(labels = slogan,       x = c(0, .5), y = .9, y_layout = \"even\",       col = c(\"black\", Bordeaux), col_bg = c(Seeblau, Seegruen),        cex = 1.1, font = 2, new_plot = \"blank\")"},{"path":"https://hneth.github.io/unikn/dev/articles/text_decorations.html","id":"post-text","dir":"Articles","previous_headings":"Plotting styled text","what":"Post text","title":"Text boxes and decorations","text":"post() function allows adding text rectangular xbox (provide functionality “Merken”):  default, post() assumes pre-existing xbox text elements labels added. square boxes, setting new_plot \"xbox\" creates new xbox default dimensions dim = c(1, 1). adjusting color text arguments, post() allows creating simple badges logos:  Another potential use post() creating images providing contact details:  , position orientation text labels can controlled using x_layout y_layout options:","code":"# Badge (to view as 250 x 250 pixel): post(labels = \"ToDo\", y = .35,       col = \"white\", col_bg = pal_signal[[1]],      cex = 3, font = 2, new_plot = \"xbox\")    # Badge (to view as 250 x 250 pixel): post(labels = \"R\", y = .35,       col = \"white\", col_bg = pal_seeblau[[5]],      cex = 8, font = 2, new_plot = \"xbox\") address <- c(\"Dr. B. F. Skinner\", \" \",              \"Department of Psychology\",              \"Office Z101\",              \"Tel.: +49 7531 88-0815\",              \"Fax: +49 7531 88-0810\",              \"b.f.skin@uni-konstanz.de\")  post(labels = \"Contact\",      y = .7,      cex = 1.2, font = 2,      col_bg = Petrol,      new_plot = \"xbox\")  # create new plot   post(labels = address,      y = .5, y_layout = .03,      new_plot = \"none\")  # add to plot"},{"path":"https://hneth.github.io/unikn/dev/articles/text_decorations.html","id":"headings","dir":"Articles","previous_headings":"Plotting styled text","what":"Headings","title":"Text boxes and decorations","text":"heading() function makes easy create recognizable headings:  default, function creates new slide (.e., new_plot = \"slide\") positions text elements  labels left edge (.e., x = 0, y = .8 y_layout = \"flush\"). headings violate official recommendations, message provided:  Re-arranging words helps avoid step-wise titles (see p. 25 CD manual):   colors left unspecified, heading() selects colors appropriate number elements labels (.e., shades Seeblau col_bg = \"default\"). However, default colors can overwritten setting  col  col_bg arguments:","code":"heading(labels = c(\"Ewig\", \"währt am\", \"längsten...\"),          y = 2/3, col_bg = usecol(pal_pinky)) # Beware of step-wise arrangements: heading(labels = c(\"Ich\", \"bin keine\", \"gute Headline.\")) #> Step-wise titles are discouraged: Consider re-arranging? # Avoiding warning: heading(labels = c(\"Ich bin\", \"eine alternative\", \"Headline.\")) heading(labels = c(\"Ene,\", \"mene, miste,\", \"es rappelt\", \"in der Kiste.\"),          col = \"white\", col_bg = c(Pinky, Seegruen, Bordeaux, Karpfenblau))"},{"path":"https://hneth.github.io/unikn/dev/articles/text_decorations.html","id":"urls","dir":"Articles","previous_headings":"Plotting styled text","what":"URLs","title":"Text boxes and decorations","text":"One obscure rules (p. 31 CD manual) concerns rendering URLs, typical web patterns (like “http” “www”) omitted replaced typographical dash (longer hyphen). url_unikn utility function allows formatting URLs uni.kn way:","code":"my_url <- url_unikn(\"https://www.uni-konstanz.de/\")  # input URL my_url # formatted URL #> [1] \"– uni-konstanz.de\"  # Put URL at bottom of an xbox: post(labels = my_url, x = .05, y = .1, font = 4,       col_bg = pal_seeblau[[5]], new_plot = \"xbox\")"},{"path":"https://hneth.github.io/unikn/dev/articles/text_decorations.html","id":"resources","dir":"Articles","previous_headings":"","what":"Resources","title":"Text boxes and decorations","text":"following versions unikn corresponding resources currently available:","code":""},{"path":"https://hneth.github.io/unikn/dev/articles/text_decorations.html","id":"vignettes","dir":"Articles","previous_headings":"","what":"Vignettes","title":"Text boxes and decorations","text":"following vignettes provide instructions examples using unikn colors, color palettes, functions:","code":""},{"path":"https://hneth.github.io/unikn/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hansjoerg Neth. Author, maintainer. Nico Gradwohl. Author.","code":""},{"path":"https://hneth.github.io/unikn/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Neth, H., & Gradwohl, N., (2024). unikn: Graphical elements University Konstanz's corporate design. Social Psychology Decision Sciences, University Konstanz, Germany. Computer software (R package version 1.0.0, April 16, 2024). Retrieved <https://CRAN.R-project.org/package=unikn>. doi <https://doi.org/10.5281/zenodo.7096191>","code":"@Manual{,   title = {unikn: Graphical elements of the University of Konstanz's corporate design},   author = {Hansjörg Neth and Nico Gradwohl},   year = {2024},   organization = {Social Psychology and Decision Sciences, University of Konstanz},   address = {Konstanz, Germany},   note = {R package (version 1.0.0, April 16, 2024)},   url = {https://CRAN.R-project.org/package=unikn},   doi = {10.5281/zenodo.7096191}, }"},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"enabling-corporate-design-elements-in-r","dir":"","previous_headings":"","what":"Enabling corporate design elements in R","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"unikn package provides useful color functionality — defining dedicated colors color palettes, functions finding, changing, viewing, using  — styled text elements (e.g., marking, underlining, plotting colored titles)  R. package’s pre-defined range colors text decoration functions based corporate design University Konstanz (see link details), can easily adapted extended purposes institutions.","code":""},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"Many institutions devise impose corporate designs (CDs) creating maintaining consistent impression presentations publications. Even writing article thesis, usually makes sense define graphical elements (e.g., color scheme) use consistently throughout project. unikn package facilitates use corporate design elements R users. currently contains dedicated colors color palettes University Konstanz, plus many additional color palettes institutions. addition, unikn provides range color functions make easy define, modify, find, use colors  R. renders use default specifications simple straightforward, experienced users can apply tools flexible creative fashion (e.g., designing new color palettes using scientific visualizations). unikn package currently provides five types objects functions:  Pre-defined colors color palettes (e.g., Seeblau pal_unikn); Functions viewing comparing colors (seecol()), using changing color palettes (usecol()), demonstrating color palettes (demopal()); Functions creating new color palettes (newpal()), finding similar colors (simcol()), searching color names (grepal()); Functions plotting graphical objects (e.g., boxes frames); Functions plotting styled text elements (e.g., highlighting underlining text). Essentially, unikn package began defining colors, now grown toolbox addressing color- plotting-related tasks  R. fun creating , hope enjoy using well!","code":""},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"latest release unikn available CRAN https://CRAN.R-project.org/package=unikn: current development version can installed GitHub repository https://github.com/hneth/unikn/:","code":"install.packages('unikn')  # install from CRAN client library('unikn')           # load the package # install.packages('devtools')  # install pkg devtools::install_github('hneth/unikn')"},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"colors-and-color-palettes","dir":"","previous_headings":"","what":"Colors and color palettes","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"colors unikn belong two categories color palettes: 16 palettes implementing colors University Konstanz’s corporate design 270 color palettes 110 additional institutions now provided unicol package","code":""},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"the-colors-of-konstanz-university","dir":"","previous_headings":"Colors and color palettes","what":"The colors of Konstanz University","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"Originally, unikn package primarily provided 16 color palettes University Konstanz:   2014, University Konstanz introduced highly recognizable CD. key component ubiquitous use Seeblau color corresponding color palette blends various shades Seeblau (boxes, lines, graphical elements) text (black--white).","code":"seecol(\"all_unikn\")"},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"basic-color-palette","dir":"","previous_headings":"Colors and color palettes > The colors of Konstanz University","what":"Basic color palette","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"default unikn color palette pal_unikn combines shades pal_seeblau pal_grau base R colors “white” “black” diverging, symmetrical palette (11 colors):  shorter version (10 colors) alternative (muted colors PowerPoint presentations) provided  pal_unikn_web  pal_unikn_ppt, respectively. (Inspect seecol(\"unikn_basic\") see corporate design specifications details.)","code":"seecol(pal_unikn)"},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"special-color-palettes","dir":"","previous_headings":"Colors and color palettes > The colors of Konstanz University","what":"Special color palettes","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"Several specialized color palettes combine elements nine color hues. preferred colors contained palette pal_unikn_pref:  distinct hue exported named color (e.g., Pinky) corresponding gradient color palette (e.g., pal_pinky). (Inspect seecol(\"grad_all\") Excel file Colours complex graphics details.) unikn exports color palettes data frames can accessed number, value, name:","code":"seecol(pal_unikn_pref) # Accessing colors from palettes: pal_unikn              # color palette of 11 colors pal_unikn[3]           # preferred (named) color 3 pal_unikn[[3]]         # color value 3: #59C7EB\" pal_unikn[\"seeblau3\"]  # color by name"},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"additional-color-palettes","dir":"","previous_headings":"Colors and color palettes","what":"Additional color palettes","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"addition 16 specific color palettes University Konstanz, former versions unikn (version 0.8.0) provided color palettes many institutions. number color palettes growing beyond scope package, color palettes institutions now collected separate R package unicol. Installing unicol currently provides access diverse range 270 color palettes 110 institutions.","code":""},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"call-for-contributions","dir":"","previous_headings":"Colors and color palettes > Additional color palettes","what":"Call for contributions","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"expanding range color palettes institutions dedicated R package unicol. Collecting color palettes using unikn color functions create color palettes? , please let us know (e.g., posting GitHub issue)! collect color palettes institutions make available R users future versions unicol. enable us verify provide credit contributions, please send us following information: code (e.g., newpal() command creating color palette), reference source information (e.g., URL color definitions), name contact information (e.g., Email address). ’re looking forward inputs contributions (GitHub issue)!","code":""},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"color-related-functions","dir":"","previous_headings":"","what":"Color-related functions","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"Beyond defining colors color palettes, unikn package provides range tools viewing manipulating colors: Two main functions — seecol() usecol() — provide simple interface viewing using color palettes. Additional color functions (.e., simcol(), grepal(), newpal(), shades_of(), ac()) provide auxiliary functionality (finding similar colors color names, creating new color palettes color gradients, adjusting transparency).","code":""},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"seeing-color-palettes-with-seecol","dir":"","previous_headings":"Color-related functions","what":"Seeing color palettes with seecol()","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"seecol() function enables either inspections individual color palette comparisons multiple color palettes.","code":""},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"viewing-a-color-palette","dir":"","previous_headings":"Color-related functions > Seeing color palettes with seecol()","what":"Viewing a color palette","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"Using seecol() individual color palette provides quick overview colors details:","code":"# Inspect an individual color palette: seecol(pal = pal_pinky,                    # a color palette / list of palettes / keyword        col_brd = \"white\", lwd_brd = 5,     # color and width of borders        main = \"Pinky colors of the University of Konstanz\")  # plot title"},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"comparing-color-palettes","dir":"","previous_headings":"Color-related functions > Seeing color palettes with seecol()","what":"Comparing color palettes","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"seecol() used recognized keyword list color palettes, function displays comparison . colors color palette requested, seecol() usecol() functions provide reasonable subsets unikn palette:","code":"# Compare a list of (scaled) color palettes:  seecol(pal = \"grad_all\", n = 3,         col_brd = \"black\", lwd_brd = .5,        main = \"Color gradient palettes (scaled to n = 3)\")"},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"using-color-palettes-with-usecol","dir":"","previous_headings":"Color-related functions","what":"Using color palettes with usecol()","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"Colors color palettes  R come various types (e.g., named colors, RGB values Hex codes) forms (e.g., data frames vectors). usecol() function provides generic wrapper changing (e.g., mixing re-scaling) using color palettes. allows using colors base R R packages. instance, can easily use colors combination barplot() function grDevices package:  image() function graphics package (geometric transformations vector r):  ggplot() function ggplot2 package (data frame df):","code":"# Mix some colors into a new palette: my_pal <- usecol(c(Seeblau, \"white\", Pinky), n = 9)  # Use color palette: barplot(1/sqrt(1:9),  col = my_pal) # Data: x <- y <- seq(-4 * pi, 4 * pi, len = 15) r <- sqrt(outer(x^2, y^2, \"+\"))  # Mix a palette with a named color: my_col <- usecol(c(Seegruen, \"white\"), n = 7)  # Image: image(z = cos(r^2) * exp(-r/10),        col = my_col, axes = FALSE) # Data (based on https://www.r-graph-gallery.com/137-spring-shapes-data-art/):  n <- 50 groups <- 1:n df <- data.frame() set.seed(3)  for (i in seq(1:30)){   data = data.frame(matrix(0, n, 3))   data[, 1] <- i   data[, 2] <- sample(groups, nrow(data))   data[, 3] <- prop.table(sample(c(rep(0, 100), c(1:n)), nrow(data)))   df = rbind(df, data)   }  names(df) <- c(\"x\",\"group\",\"y\")     # name variables df$group <- as.factor(df$group)     # group as factor df <- df[c(2, 1, 3)]                # order of variables df <- df[order(df$x, df$group) , ]  # order of rows # Mix a color gradient:  my_col <- usecol(c(Bordeaux, \"white\", Petrol), n = 50)  # Plot (with ggplot2): library(ggplot2)  ggplot(df, aes(x = x, y = y, fill = group)) +    geom_area() +   scale_fill_manual(values = my_col) +   theme_void() +   theme(legend.position = \"none\")"},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"illustrating-color-palettes","dir":"","previous_headings":"Color-related functions > Using color palettes with usecol()","what":"Illustrating color palettes","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"demopal() function provides quick illustration pre-defined modified color palette:","code":"demopal(usecol(pal_unikn_light, n = 7),  # use a modified color palette         type = \"curve\", seed = 2)        # reproducible randomness"},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"creating-color-palettes-with-newpal","dir":"","previous_headings":"Color-related functions","what":"Creating color palettes with newpal()","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"newpal() function allows creating new color palettes (data frames vectors, optional color names). Whereas unikn developed academic context, color palettes entities purposes can easily created. instance, let’s define color palette well-known Google logo 3 steps: Choose colors (named R colors, RGB/HEX/HCL values, e.g., sites like https://www.schemecolor.com). Define colors (optional color names) R vectors (type character). Use newpal() command define new color palette. can now use new palette visualizations (e.g., inspect seecol() function, use visualizations, modify usecol() function):  See vignette Institutional colors additional examples creating color palettes.","code":"# 1. Choose colors: # Google logo colors (from <https://www.schemecolor.com/google-logo-colors.php>)  # 2. Define colors and color names (as vectors): color_google <- c(\"#4285f4\", \"#34a853\", \"#fbbc05\", \"#ea4335\") names_google <- c(\"blueberry\", \"sea green\", \"selective yellow\", \"cinnabar\")  # 3. Define color palette: pal_google <- newpal(color_google, names_google)  # Inspect color palette: seecol(pal_google,         col_brd = \"white\", lwd_brd = 8,        main = \"Colors of Google\")"},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"finding-colors","dir":"","previous_headings":"Color-related functions","what":"Finding colors","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"creating visualizations, often face two search situations: Finding colors look similar given color Finding colors match particular names simcol() grepal() functions unikn address situations.","code":""},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"finding-similar-colors-with-simcol","dir":"","previous_headings":"Color-related functions > Finding colors","what":"Finding similar colors with simcol()","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"R colors similar color Pinky (pinky4 pal_pinky palette)?  default, simcol() considers unique named colors()  R, search range can adjusted col_candiates, tol, distinct arguments.","code":"simcol(col_target = Pinky, tol = 30) #>            Pinky         hotpink3       indianred2    palevioletred  #>        \"#E0607E\"       \"hotpink3\"     \"indianred2\"  \"palevioletred\"  #>   palevioletred3  #> \"palevioletred3\""},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"finding-color-names-with-grepal","dir":"","previous_headings":"Color-related functions > Finding colors","what":"Finding color names with grepal()","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"grepal() function allows finding colors matching name pattern. Specifically, grepal(pattern, x) searches color palette x (.e., vector color names data frame named colors) elements match pattern returns elements (colors) match pattern. pattern can regular expression. default, grepal() searches 657 named colors provided colors() base R. make grepal() flexible, pattern argument can use regular expressions:  Providing list color palettes pal argument seecol() allows comparing multiple color palettes:  See vignette Colors color functions Color recipes additional examples.","code":"# Find colors matching a pattern:  deep_purple <- grepal(pattern = \"deep|purple\", plot = FALSE)  # See color palette: seecol(deep_purple,         col_brd = \"white\", lwd_brd = 2,         main = \"Finding 'deep' or 'purple' colors\") # Find colors matching some term(s): olives  <- grepal(\"olive\", plot = FALSE) oranges <- grepal(\"orange\", plot = FALSE)  # See color palettes: seecol(pal = list(olives, oranges),         pal_names = c(\"olives\", \"oranges\"),         main = \"Comparing olives with oranges\")"},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"text-decorations","dir":"","previous_headings":"","what":"Text decorations","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"Beyond colors color functions, unikn provides functions plotting graphical elements (like boxes) styled text elements (lines background decorations). default, text-decoration functions assume want add styled text existing plot, unless new_plot argument specifies type plot generated. use functions explained detail vignette Text boxes decorations, provide examples .","code":""},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"mark","dir":"","previous_headings":"Text decorations","what":"Mark","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"mark() function allows emphasizing text plotting colored background (provide functionality “Markieren”):","code":"mark(labels = c(\"Markieren\", \"ist ein Bestandteil\", \"von Studieren.\"),       x = 0, y = .8, y_layout = .03, cex = 1.5, new_plot = \"slide\")"},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"underline","dir":"","previous_headings":"Text decorations","what":"Underline","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"uline() function allows emphasizing text plotting colored underlining (provide functionality “Unterstreichen”):","code":"uline(labels = c(\"Linear\", \"Authentic\", \"Flexible\", \"Open\", \"Practical\"),        x = .05, y = .9, y_layout = \"even\", cex = 1.1, font = 2, new_plot = \"slide\")"},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"post","dir":"","previous_headings":"Text decorations","what":"Post","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"post() function allows adding text rectangular xbox (provide functionality “Merken”):  color font parameters can adjusted obtain different looks:","code":"xbox(col = usecol(pal_seeblau[[5]]), dim = c(2, 2)) post(labels = c(\"Für eine\", \"Kultur der\", \"Kreativität\"), x = .1, y = .8, cex = 1.4, font = 2) post(labels = c(\"creative.\", \"together\"), new_plot = \"xbox\",       y_layout = .02, cex = 2, font = c(1, 3),        col_bg = pal_seegruen[[1]], col = c(Petrol, Pinky))"},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"headings","dir":"","previous_headings":"Text decorations","what":"Headings","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"heading() function convenient wrapper around mark:","code":"heading(labels = c(\"pa-\", \"ra-\", \"die-\", \"sisch\"))"},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"urls","dir":"","previous_headings":"Text decorations","what":"URLs","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"Finally, url_unikn() function allows formatting URLs uni.kn way:","code":"my_url <- url_unikn(\"https://www.uni-konstanz.de/\")  # input URL as copied from web browser  post(labels = my_url, x = .2, y = .1, font = 4, new_plot = \"xbox\")"},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"using-custom-color-palettes","dir":"","previous_headings":"Text decorations","what":"Using custom color palettes","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"unikn color palettes user-generated color palette (e.g., defined newpal() usecol()) can used graphical annotations. example: Using color palette pal_google (defined ):  See vignette Text boxes decorations instructions additional examples.","code":""},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"caveats","dir":"","previous_headings":"Text decorations","what":"Caveats","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"Please note following caveats: Plotting text (.e., graphically rendering characters) rarely good idea. typically doesn’t scale (changing size images) recognized automatically (e.g., copied, indexed, scraped). Hence, corresponding unikn functions used contexts better solutions available practical (e.g., specifically creating images, adding annotations graphs). templates — just like others — subject constraints limitations. standard installation  R lacks “Theinhardt” fonts, can mimic official design specifications (Arial, sans serif). Nevertheless, unikn package helps preventing common mistakes novices (e.g., boxes lines extending beyond text, step-functions multi-line titles) can customized improved expert users. Overall, unikn functions can useful solving color-related tasks plotting graphical elements (e.g., boxes, logos, etc.). Ideally, help creating stylish recognizable design presentations visualizations.","code":""},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"todo","dir":"","previous_headings":"","what":"ToDo","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"unikn unicol packages still development. currently working : Adding institutional color palettes unicol package Additional templates themes (plots text decoration) Please comment GitHub contact us need additional features want help creating .","code":""},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"following versions unikn corresponding resources currently available:","code":""},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"Please note report unikn-related issues https://github.com/hneth/unikn/issues. looking forward feedback, comments, questions.","code":""},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"copyrights","dir":"","previous_headings":"","what":"Copyrights","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"University Konstanz’s Corporate Design (CD) created Strichpunkt GmbH University Konstanz  2014. unikn package authors members research group Social Psychology Decision Sciences (SPDS) University Konstanz. facilitate access CD elements fellow users  R (e.g., creating scientific visualizations), copyrights design remain original copyright holders. aim authentic representation highly-specified corporate design. rigid specifications help maintain coherence consistency, also tend cause frustration expert users. design developed flexible way allows individual elements modified needed, allow liberties, mostly relaxing restrictions. Examples include: enabling finer color gradients arbitrary combinations color palettes (applying seecol() usecol() functions color palettes); providing designated Signal color (pal_signal); using spelling “color” (rather “colour”) throughout unikn package.","code":""},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"license","dir":"","previous_headings":"Copyrights","what":"License","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"unikn (created Hansjörg Neth Nico Gradwohl) licensed Creative Commons Attribution-ShareAlike 4.0 International License. (Based work https://github.com/hneth/unikn).","code":""},{"path":"https://hneth.github.io/unikn/dev/index.html","id":"citation-and-references","dir":"","previous_headings":"Copyrights","what":"Citation and References","title":"Graphical Elements of the University of Konstanz's Corporate Design","text":"support efforts, please cite unikn package derivations publications: Neth, H., & Gradwohl, N., (2024). unikn: Graphical elements University Konstanz’s corporate design. Social Psychology Decision Sciences, University Konstanz, Germany. Computer software (R package version 1.0.0, April 16, 2024). Retrieved https://CRAN.R-project.org/package=unikn.https://doi.org/10.5281/zenodo.7096191 BibTeX entry LaTeX users : copyrights uni.kn designs remain original creators: University Konstanz’s corporate design (Version 1.6, September 2015) Colours complex graphics Strichpunkt GmbH, – strichpunkt-design.de [File README.md updated 2025-09-16.]","code":"@Manual{,   title = {unikn: Graphical elements of the University of Konstanz's corporate design},   author = {Hansjörg Neth and Nico Gradwohl},   year = {2024},   organization = {Social Psychology and Decision Sciences, University of Konstanz},   address = {Konstanz, Germany},   note = {R package (version 1.0.0, April 16, 2024)},   url = {https://CRAN.R-project.org/package=unikn},   doi = {10.5281/zenodo.7096191}, }"},{"path":"https://hneth.github.io/unikn/dev/reference/Bordeaux.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color Bordeaux — Bordeaux","title":"uni.kn color Bordeaux — Bordeaux","text":"Bordeaux provides preferred color pal_bordeaux (atomic HEX character value) defined pal_bordeaux[[4]].","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Bordeaux.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color Bordeaux — Bordeaux","text":"","code":"Bordeaux"},{"path":"https://hneth.github.io/unikn/dev/reference/Bordeaux.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color Bordeaux — Bordeaux","text":"object class character length 1.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Bordeaux.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color Bordeaux — Bordeaux","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/Bordeaux.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color Bordeaux — Bordeaux","text":"","code":"Bordeaux  # HEX character \"#8E2043\" (as value) #>  Bordeaux  #> \"#8E2043\"  all.equal(Bordeaux, pal_bordeaux[[4]])  # TRUE (same HEX values) #> [1] \"names for target but not for current\"  seecol(Bordeaux)  # view color and details"},{"path":"https://hneth.github.io/unikn/dev/reference/Grau.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color Grau — Grau","title":"uni.kn color Grau — Grau","text":"Grau provides preferred color pal_grau (atomic HEX character value) defined pal_grau[[3]].","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Grau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color Grau — Grau","text":"","code":"Grau"},{"path":"https://hneth.github.io/unikn/dev/reference/Grau.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color Grau — Grau","text":"object class character length 1.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Grau.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color Grau — Grau","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/Grau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color Grau — Grau","text":"","code":"Grau  # HEX character \"#9AA0A7\" (as value) #>      Grau  #> \"#9AA0A7\"  all.equal(Grau, pal_grau[[3]])  # TRUE (same HEX values) #> [1] \"names for target but not for current\"  seecol(Grau)  # view color and details"},{"path":"https://hneth.github.io/unikn/dev/reference/Karpfenblau.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color Karpfenblau — Karpfenblau","title":"uni.kn color Karpfenblau — Karpfenblau","text":"Karpfenblau provides preferred color pal_karpfenblau (atomic HEX character value) defined pal_karpfenblau[[4]].","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Karpfenblau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color Karpfenblau — Karpfenblau","text":"","code":"Karpfenblau"},{"path":"https://hneth.github.io/unikn/dev/reference/Karpfenblau.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color Karpfenblau — Karpfenblau","text":"object class character length 1.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Karpfenblau.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color Karpfenblau — Karpfenblau","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/Karpfenblau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color Karpfenblau — Karpfenblau","text":"","code":"Karpfenblau  # HEX character \"#3E5496\" (as value) #> Karpfenblau  #>   \"#3E5496\"  all.equal(Karpfenblau, pal_karpfenblau[[4]])  # TRUE (same HEX values) #> [1] \"names for target but not for current\"  seecol(Karpfenblau)  # view color and details"},{"path":"https://hneth.github.io/unikn/dev/reference/Peach.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color Peach — Peach","title":"uni.kn color Peach — Peach","text":"Peach provides preferred color pal_peach (atomic HEX character value) defined pal_peach[[4]].","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Peach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color Peach — Peach","text":"","code":"Peach"},{"path":"https://hneth.github.io/unikn/dev/reference/Peach.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color Peach — Peach","text":"object class character length 1.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Peach.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color Peach — Peach","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/Peach.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color Peach — Peach","text":"","code":"Peach  # HEX character \"#FEA090\" (as value) #>     Peach  #> \"#FEA090\"  all.equal(Peach, pal_peach[[4]])  # TRUE (same HEX values) #> [1] \"names for target but not for current\"  seecol(Peach)  # view color and details"},{"path":"https://hneth.github.io/unikn/dev/reference/Petrol.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color Petrol — Petrol","title":"uni.kn color Petrol — Petrol","text":"Petrol provides preferred color pal_petrol (atomic HEX character value) defined pal_petrol[[4]].","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Petrol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color Petrol — Petrol","text":"","code":"Petrol"},{"path":"https://hneth.github.io/unikn/dev/reference/Petrol.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color Petrol — Petrol","text":"object class character length 1.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Petrol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color Petrol — Petrol","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/Petrol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color Petrol — Petrol","text":"","code":"Petrol  # HEX character \"#077187\" (as value) #>    Petrol  #> \"#077187\"  all.equal(Petrol, pal_petrol[[4]])  # TRUE (same HEX values) #> [1] \"names for target but not for current\"  seecol(Petrol)  # view color and details"},{"path":"https://hneth.github.io/unikn/dev/reference/Pinky.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color Pinky — Pinky","title":"uni.kn color Pinky — Pinky","text":"Pinky provides preferred color pal_pinky (atomic HEX character value) defined pal_pinky[[4]].","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Pinky.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color Pinky — Pinky","text":"","code":"Pinky"},{"path":"https://hneth.github.io/unikn/dev/reference/Pinky.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color Pinky — Pinky","text":"object class character length 1.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Pinky.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color Pinky — Pinky","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/Pinky.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color Pinky — Pinky","text":"","code":"Pinky  # HEX character \"#E0607E\" (as value) #>     Pinky  #> \"#E0607E\"  all.equal(Pinky, pal_pinky[[4]])  # TRUE (same HEX values) #> [1] \"names for target but not for current\"  seecol(Pinky)  # view color and details"},{"path":"https://hneth.github.io/unikn/dev/reference/Seeblau.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color Seeblau — Seeblau","title":"uni.kn color Seeblau — Seeblau","text":"Seeblau provides preferred color pal_seeblau (atomic HEX character value) defined pal_seeblau[[3]].","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Seeblau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color Seeblau — Seeblau","text":"","code":"Seeblau"},{"path":"https://hneth.github.io/unikn/dev/reference/Seeblau.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color Seeblau — Seeblau","text":"object class character length 1.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Seeblau.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color Seeblau — Seeblau","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/Seeblau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color Seeblau — Seeblau","text":"","code":"Seeblau  # HEX character \"#59C7EB\" (as value) #>   Seeblau  #> \"#59C7EB\"  all.equal(Seeblau, pal_seeblau[[3]])  # TRUE (same HEX values) #> [1] \"names for target but not for current\"  seecol(Seeblau)  # view color and details"},{"path":"https://hneth.github.io/unikn/dev/reference/Seegruen.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color Seegruen — Seegruen","title":"uni.kn color Seegruen — Seegruen","text":"Seegruen provides preferred color pal_seegruen (atomic HEX character value) defined pal_seegruen[[4]].","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Seegruen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color Seegruen — Seegruen","text":"","code":"Seegruen"},{"path":"https://hneth.github.io/unikn/dev/reference/Seegruen.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color Seegruen — Seegruen","text":"object class character length 1.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Seegruen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color Seegruen — Seegruen","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/Seegruen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color Seegruen — Seegruen","text":"","code":"Seegruen  # HEX character \"#0A9086\" (as value) #>  Seegruen  #> \"#0A9086\"  all.equal(Seegruen, pal_seegruen[[4]])  # TRUE (same HEX values) #> [1] \"names for target but not for current\"  seecol(Seegruen)  # view color and details"},{"path":"https://hneth.github.io/unikn/dev/reference/Signal.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color Signal or alert — Signal","title":"uni.kn color Signal or alert — Signal","text":"Signal provides alert color pal_signal (atomic HEX character value) defined pal_signal[2].","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color Signal or alert — Signal","text":"","code":"Signal"},{"path":"https://hneth.github.io/unikn/dev/reference/Signal.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color Signal or alert — Signal","text":"object class character length 1.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/Signal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color Signal or alert — Signal","text":"official specification pal_signal identify preferred color. provide Signal dedicated color suited creating color gradients (see usecol). See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/Signal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color Signal or alert — Signal","text":"","code":"Signal  # HEX character \"#EFDC60\" (as value) #>    Signal  #> \"#EFDC60\"  all.equal(Signal, pal_signal[[2]])  # TRUE (same HEX values) #> [1] \"names for target but not for current\"  seecol(Signal)  # view color and details"},{"path":"https://hneth.github.io/unikn/dev/reference/ac.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust color transparency — ac","title":"Adjust color transparency — ac","text":"ac adjusts transparency color color palette col opacity level alpha ([0, 1]).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/ac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust color transparency — ac","text":"","code":"ac(col, alpha = 0.5, use_names = TRUE)"},{"path":"https://hneth.github.io/unikn/dev/reference/ac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust color transparency — ac","text":"col (required) color color palette (vector). alpha factor modifying opacity alpha (alpha.f adjustcolor) value [0, 1]. Default: alpha = .50 (.e., medium opacity). use_names logical value indicating whether color names adjusted include values alpha. Default: use_names = TRUE.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/ac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust color transparency — ac","text":"color vector length col, transformed adjustcolor.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/ac.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust color transparency — ac","text":"ac mostly wrapper adjustcolor grDevices package, allows flexible combinations (multiple) col alpha values. name ac abbreviation \"adjust color\", also mnemonic aid providing \"air conditioning\".","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/ac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust color transparency — ac","text":"","code":"ac(\"black\")  # using alpha = .5 by default #>   black_0.5  #> \"#00000080\"   # multiple colors: cols <- ac(c(\"black\", \"gold\", \"deepskyblue\"), alpha = .50) seecol(cols, main = \"Transparent colors\")   # multiple alphas: blacks <- ac(\"black\", alpha = 5:0/5) seecol(blacks, main = \"One col several alpha values\")   bgc <- ac(c(\"black\", \"gold\"), alpha = 1:6/6) seecol(bgc, main = \"More alpha values than cols\")   # Using a color palette: seecol(ac(pal_unikn_pref, 2/3), main = \"Adding color transparency by ac()\")   # Color names: seecol(ac(col = pal_unikn_pref, alpha = c(1/5, 4/5), use_names = TRUE))  seecol(ac(col = pal_unikn_pref, alpha = c(1/5, 4/5), use_names = FALSE))"},{"path":"https://hneth.github.io/unikn/dev/reference/all_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide all unikn colors and base R colors — all_colors","title":"Provide all unikn colors and base R colors — all_colors","text":"all_colors combines unikn color gradients 657 named colors provided colors grDevices.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/all_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide all unikn colors and base R colors — all_colors","text":"","code":"all_colors(distinct = TRUE)"},{"path":"https://hneth.github.io/unikn/dev/reference/all_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide all unikn colors and base R colors — all_colors","text":"distinct Boolean: Return colors unique values names? Default: distinct = TRUE (.e., remove duplicate values names).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/all_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide all unikn colors and base R colors — all_colors","text":"named vector color values (type character).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/all_colors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Provide all unikn colors and base R colors — all_colors","text":"color values returned (named character vector) either HEX/HTML codes base R color names. distinct option removes colors duplicate color values names.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/demopal.html","id":null,"dir":"Reference","previous_headings":"","what":"Demonstrate a color palette (in a plot) — demopal","title":"Demonstrate a color palette (in a plot) — demopal","text":"demopal provides example plot type illustrate color palette pal.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/demopal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demonstrate a color palette (in a plot) — demopal","text":"","code":"demopal(pal = pal_unikn, type = NA, pal_name = NULL, ...)"},{"path":"https://hneth.github.io/unikn/dev/reference/demopal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Demonstrate a color palette (in a plot) — demopal","text":"pal color palette (illustrated). Default: pal = pal_unikn. type type plot used (character string integer value). Permissible types \"bar\", \"curve\", \"mosaic\", \"polygon\", \"scatter\" (integer value 1 5, respectively). pal_name name input color palette pal (shown bottom-right margin). Default: pal_name = NULL (deparsing input name). ... Auxiliary arguments passed type-specific plots (see details).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/demopal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Demonstrate a color palette (in a plot) — demopal","text":"random data plotted (invisible R object).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/demopal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Demonstrate a color palette (in a plot) — demopal","text":"demopal wrapper function passes range arguments specific functions. Common arguments include: col_par Default color par(col); alpha Default value color transparency (0:1); n scaling parameter (random data generation); main plot title (top); sub plot subtitle (right margin); seed random seed value (reproducible randomness). fit color palette pal plot type depends uses colors plot. instance, overlaps transparent color areas can evaluated plot type = \"curve\" plot type = \"scatter\" (0 < alpha < 1). functions additionally accept type-specific arguments (e.g., beside, horiz, as_prop, plot type = \"bar\", cex plot type = \"scatter\"). type-specific functions usually generate random data (scaled parameter n) plotted. data returned (invisible R object) enable plot's reconstruction.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/demopal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Demonstrate a color palette (in a plot) — demopal","text":"","code":"demopal(pal = pal_petrol, type = 1)   my_pal <- c(rev(pal_pinky), pal_seeblau)  # Selecting plot type: demopal(my_pal, type = 2)          # by numeric index  demopal(my_pal, type = \"polygon\")  # by name   # Passing type-specific arguments: demopal(type = \"scatter\", col_par = \"black\", n = 200, cex = c(2, 4, 6), seed = 101)"},{"path":"https://hneth.github.io/unikn/dev/reference/get_col_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get color names — get_col_names","title":"Get color names — get_col_names","text":"get_col_names gets color names color palettes.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/get_col_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get color names — get_col_names","text":"","code":"get_col_names(col, custom_pals = all_pals)"},{"path":"https://hneth.github.io/unikn/dev/reference/get_col_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get color names — get_col_names","text":"col vector colors. custom_pals vector color palettes.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/get_col_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get color names — get_col_names","text":"vector color names.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/grepal.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a vector of colors whose names match a regular expression — grepal","title":"Get a vector of colors whose names match a regular expression — grepal","text":"grepal returns vector colors whose names match regular expression (regex).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/grepal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a vector of colors whose names match a regular expression — grepal","text":"","code":"grepal(pattern, x = colors(), ignore_case = TRUE, plot = TRUE)"},{"path":"https://hneth.github.io/unikn/dev/reference/grepal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a vector of colors whose names match a regular expression — grepal","text":"pattern regular expression (specified string/character object). x vector R color names data frame named colors (.e., whose names can searched). Default: x = colors(). ignore_case case pattern ignored (passed ignore.case grep function)? Default: ignore_case = TRUE. plot Boolean: Plot output (using seecol)? Default: plot = TRUE.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/grepal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a vector of colors whose names match a regular expression — grepal","text":"default, base R vector named colors (.e., colors()) searched names matching pattern (can simple string regular expression). x (.e., object searched) provided, must vector color names data frame named color objects (.e., color palette). plot = TRUE, grepal also visualizes detected colors (passing result seecol, side-effect). function facilitates searching colors name yields (vector ) colors similar color hue (provided color's hue expressed color's name). name grepal abbreviation grep \"pal\".","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/grepal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a vector of colors whose names match a regular expression — grepal","text":"","code":"grepal(\"tan\") #> Searching the elements of x  #> [1] \"tan\"  \"tan1\" \"tan2\" \"tan3\" \"tan4\"  # With regular expressions: some_grey  <- grepal(\"gr(a|e)y\", plot = FALSE) #> Searching the elements of x start_grey <- grepal(\"^gr(a|e)y\", plot = FALSE) #> Searching the elements of x only_grey  <- grepal(\"^gr(a|e)y$\", plot = FALSE) #> Searching the elements of x  length(some_grey) #> [1] 224 length(only_grey) #> [1] 2  # With other color objects (df as x): grepal(\"blau\", x = pal_unikn) #> Searching the names of x  #>   seeblau5 seeblau4 seeblau3 seeblau2 seeblau1 #> 1  #008ECE  #00A9E0  #59C7EB  #A6E1F4  #CCEEF9 grepal(\"SEE\", x = pal_unikn_pref, ignore_case = FALSE) #> Searching the names of x #> [1] NA  # Applications: seecol(grepal(\"white\"), col_bg = \"lightblue2\", main = \"See 'white' colors()\") #> Searching the elements of x    olives  <- grepal(\"olive\", plot = FALSE) #> Searching the elements of x oranges <- grepal(\"orange\", plot = FALSE) #> Searching the elements of x seecol(list(olives, oranges),         pal_names = c(\"olives\", \"oranges\"),         main = \"Comparing olives and oranges\")"},{"path":"https://hneth.github.io/unikn/dev/reference/heading.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a heading (as marked text elements) — heading","title":"Plot a heading (as marked text elements) — heading","text":"heading plots 1 text strings (provided character vector labels) heading (existing new) plot places colored box behind label mark (.e., highlighting heading).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/heading.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a heading (as marked text elements) — heading","text":"","code":"heading(   labels,   x = 0,   y = 0.8,   x_layout = NA,   y_layout = \"flush\",   col = \"black\",   col_bg = \"default\",   cex = 2,   font = 2,   new_plot = \"slide\" )"},{"path":"https://hneth.github.io/unikn/dev/reference/heading.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a heading (as marked text elements) — heading","text":"labels character vector specifying text labels plotted. x numeric vector x-coordinates text labels labels written. lengths x y differ, shorter one recycled. Default: x = 0. y numeric vector y-coordinates text labels labels written. lengths x y differ, shorter one recycled. Default: y = .8. x_layout optional numeric vector character string control horizontal positions labels. Numeric values interpreted increments values x recycled (enable stepwise alternating patterns). 3 character string options : \"center\" (.e., center wrt. first label plot center), \"left\" (.e., left wrt. first label plot center), \"right\" (.e., right wrt. first label plot center). Default: x_layout = NA (.e., using values x). y_layout numeric value character string control vertical positions labels. Numeric values interpreted increments values y[1] recycled (enable stepwise alternating patterns). 2 character string options : \"even\" (.e., even distribution labels across available y-space) \"flush\" (.e., space adjacent labels, .e., y_layout = 0). Default: y_layout = \"flush\". col color(s) text label(s). Default: col_lbl = \"black\". col_bg color(s) highlight fill rectangle(s) . Default: col_bg = \"default\" (automatically select different shades pal_seeblau). cex Numeric character expansion factor(s), multiplied par(\"cex\") yield character size(s). Default: cex = 2. font font type(s) used. Default: font = 2 (.e., bold). new_plot Boolean: new plot generated? Set \"blank\" \"slide\" create new plot, \"none\" add existing plot. Default: new_plot = \"slide\" (.e., create new slide).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/heading.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a heading (as marked text elements) — heading","text":"Text formatting parameters (like col, col_bg, cex, font) recycled match length(labels). heading uses base graphics system graphics::.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/heading.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a heading (as marked text elements) — heading","text":"","code":"heading(labels = c(\"This is a headline\", \"containing two lines.\"))   # Note the warning: heading(labels = c(\"Headlines\", \"with 3 or more lines\",                   \"should not be arranged\", \"in such a step-wise fashion.\"))  #> Step-wise titles are discouraged: Consider re-arranging?   # Avoiding the warning: heading(labels = c(\"Headlines with\", \"3 or more lines should\",                     \"not be arranged\", \"in a step-wise fashion.\"))   # Using non-default colors: heading(labels = c(\"Ene,\", \"mene, miste,\", \"es rappelt\", \"in der Kiste.\"),          cex = 1.6, col = \"white\", col_bg = usecol(c(Pinky, Seegruen, Bordeaux, Karpfenblau)))   # Using x_layout and y_layout: heading(labels = c(\"Ene,\", \"mene, miste,\", \"es rappelt\", \"in der Kiste.\"),          cex = 1.6, col = \"white\", col_bg = usecol(pal_pinky[2:5]),          x = NA, y = .6, x_layout = \"right\", y_layout = \"flush\")   #' @family text functions"},{"path":"https://hneth.github.io/unikn/dev/reference/mark.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marked (or highlighted) text elements — mark","title":"Plot marked (or highlighted) text elements — mark","text":"mark plots 1 text strings (provided character vector labels) (existing new) plot places colored box behind label mark (.e., highlight make stand background).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/mark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marked (or highlighted) text elements — mark","text":"","code":"mark(   labels,   x = 0,   y = 0.55,   x_layout = NA,   y_layout = \"even\",   col = \"black\",   col_bg = Seeblau,   cex = 2,   font = 2,   new_plot = \"none\" )"},{"path":"https://hneth.github.io/unikn/dev/reference/mark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marked (or highlighted) text elements — mark","text":"labels character vector specifying text labels plotted. x numeric vector x-coordinates text labels labels written. lengths x y differ, shorter one recycled. Default: x = 0. y numeric vector y-coordinates text labels labels written. lengths x y differ, shorter one recycled. Default: y = .55. x_layout optional numeric vector character string control horizontal positions labels. Numeric values interpreted increments values x recycled (enable stepwise alternating patterns). 3 character string options : \"center\" (.e., center wrt. first label plot center), \"left\" (.e., left wrt. first label plot center), \"right\" (.e., right wrt. first label plot center). Default: x_layout = NA (.e., using values x). y_layout numeric value character string control vertical positions labels. Numeric values interpreted increments values y[1] recycled (enable stepwise alternating patterns). 2 character string options : \"even\" (.e., even distribution labels across available y-space) \"flush\" (.e., space adjacent labels, .e., y_layout = 0). Default: y_layout = \"even\". col color(s) text label(s). Default: col_lbl = \"black\". col_bg color(s) highlight fill rectangle(s) . Default: col_bg = Seeblau. cex Numeric character expansion factor(s), multiplied par(\"cex\") yield character size(s). Default: cex = 2. font font type(s) used. Default: font = 2 (.e., bold). new_plot new plot generated? Set \"blank\" \"slide\" create new plot. Default: new_plot = \"none\" (.e., add existing plot).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/mark.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot marked (or highlighted) text elements — mark","text":"positions text elements labels can specified providing coordinates (x y arguments) providing initial position y_layout (see ). Text formatting parameters (like col, col_bg, cex, font) recycled match length(labels). mark uses base graphics system graphics::.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/mark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marked (or highlighted) text elements — mark","text":"","code":"# Basics:  mark(labels = \"This is a test.\", new_plot = \"blank\")  # create a new blank plot mark(labels = \"More testing here...\", y = .45, col_bg = pal_pinky[[2]])  # add to plot   # Example:  # (a) Mark text on an existing plot: plot(x = 0, y = 0, type = \"n\", xlim = c(0, 1), ylim = c(0, 1), xlab = \"\", ylab = \"\") mark(x = 0, y = .8, labels = \"Mark (on an existing plot)\")  # uses existing plot   # (b) Mark text on a new plot: mark(x = 0, y = .8, labels = \"Mark (and create a new plot)\",       new_plot = \"slide\")  # starts a new plot  # (c) More text and decorations: mark(x = 0, y = c(.60, .50),       labels = c(\"Highlighting text is simple\", \"and effective\"),      cex = 1.5, col_bg = c(pal_seeblau[[2]], pal_seeblau[[1]]))  mark(labels = c(\"It is also flexible\", \"but to be handled with care\"),      x = .4, y = .3, y_layout = \"flush\", cex = 1.2,      col = c(\"white\", \"black\"), col_bg = c(pal_seeblau[[5]], \"gold\"))        # Using x_layout and y_layout:       mark(labels = c(\"One, and\", \"two, and\", \"three and four is\", \"plenty and perhaps enough...\"),       cex = 1.4, font = 2, col = \"white\", col_bg = Bordeaux,      x = .5, y = .6, x_layout = c(-.25, +.25), y_layout = 0, new_plot = \"slide\")"},{"path":"https://hneth.github.io/unikn/dev/reference/newpal.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a new color palette — newpal","title":"Define a new color palette — newpal","text":"newpal allows defining new color palettes (data frames vectors).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/newpal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a new color palette — newpal","text":"","code":"newpal(col, names = NULL, pattern = NULL, replacement = NULL, as_df = FALSE)"},{"path":"https://hneth.github.io/unikn/dev/reference/newpal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a new color palette — newpal","text":"col required vector colors (specified R color names, HEX codes, RGB values). names optional character vector color names. Default: names = NULL, using default color names. Setting names = NA removes color names. pattern pattern replaced names (REGEX). Default: pattern = NULL. replacement replacement pattern names (REGEX). Default: replacement = NULL. as_df new color palette returned data frame (rather vector)? Default: as_df = FALSE.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/newpal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a new color palette — newpal","text":"(named) vector data frame.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/newpal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define a new color palette — newpal","text":"Specifying pattern replacment allows modifying names regular expressions (using gsub(..., perl = TRUE)). default, new palette returned (named) vector. Setting as_df = TRUE returns new palette data frame.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/newpal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a new color palette — newpal","text":"","code":"newpal(col = c(\"black\", \"white\"), names = c(\"dark\", \"bright\")) #>    dark  bright  #> \"black\" \"white\"   # Example: 3 ways of defining a new color palette:  # (1) From R color names: -----  pal_flag_de <- newpal(col = c(\"black\", \"firebrick3\", \"gold\"),                       names = c(\"Schwarz\", \"Rot\", \"Gold\")) seecol(pal_flag_de, main = \"Colors of the German flag\")   # (2) From HEX values: -----  # (a) Google logo colors: # Source: https://www.schemecolor.com/google-logo-colors.php color_google <- c(\"#4285f4\", \"#34a853\", \"#fbbc05\", \"#ea4335\") names_google <- c(\"blueberry\", \"sea green\", \"selective   yellow\", \"cinnabar\") pal_google   <- newpal(color_google, names_google, pattern = \"\\\\s+\", replacement = \"_\")  seecol(pal_google, main = \"Colors of the Google logo\", col_brd = \"white\", lwd_brd = 10)   # (b) German flag (revised): # Based on a different source at # <https://www.schemecolor.com/germany-flag-colors.php>: pal_flag_de_2 <- newpal(col = c(\"#000000\", \"#dd0000\", \"#ffce00\"),                         names = c(\"black\", \"red\", \"gold\")                         ) seecol(pal_flag_de_2, main = \"Colors of the German flag (www.schemecolor.com)\")   # (c) Mixing HEX and R color names: pal_mpg <- newpal(col = c(\"#007367\", \"white\", \"#D0D3D4\"),                   names = c(\"MPG green\", \"white\", \"MPG grey\"),                   pattern = \"([A-Z])\", replacement = \"\\\\L\\\\1\"  # replace upper by lowercase                   ) seecol(pal_mpg, main = \"The colors of the Max Planck Society\", col_bg = \"grey\")   # (3) From RGB values: -----  # A barrier-free color palette # Source: Okabe & Ito (2002): Color Universal Design (CUD): #         Fig. 16 of <https://jfly.uni-koeln.de/color/>:    # (a) Vector of colors (as RGB values): o_i_colors <- c(rgb(  0,   0,   0, maxColorValue = 255),  # black                 rgb(230, 159,   0, maxColorValue = 255),  # orange                 rgb( 86, 180, 233, maxColorValue = 255),  # skyblue                 rgb(  0, 158, 115, maxColorValue = 255),  # green                 rgb(240, 228,  66, maxColorValue = 255),  # yellow                 rgb(  0, 114, 178, maxColorValue = 255),  # blue                 rgb(213,  94,   0, maxColorValue = 255),  # vermillion                 rgb(204, 121, 167, maxColorValue = 255)   # purple )  # (b) Vector of color names: o_i_names <- c(\"black\", \"orange\", \"skyblue\", \"green\", \"yellow\", \"blue\", \"vermillion\", \"purple\")  # (c) Use newpal() to combine colors and names: pal_okabe_ito <- newpal(col = o_i_colors, names = o_i_names,                          pattern = \"(^[a-z])\", replacement = \"\\\\U\\\\1\")  # capitalize initial  seecol(pal_okabe_ito,        main = \"Color-blind friendly color scale (Okabe & Ito, 2002)\")   # (+) Compare custom color palettes: -----   my_pals <- list(pal_flag_de, pal_flag_de_2, pal_google, pal_mpg, pal_okabe_ito) seecol(my_pals, col_brd = \"white\", lwd_brd = 4,        main = \"Comparing custom color palettes\")"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_bordeaux.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color palette bordeaux — pal_bordeaux","title":"uni.kn color palette bordeaux — pal_bordeaux","text":"pal_bordeaux provides additional uni.kn color palette data frame containing 5 colors (shades Bordeaux).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_bordeaux.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color palette bordeaux — pal_bordeaux","text":"","code":"pal_bordeaux"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_bordeaux.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color palette bordeaux — pal_bordeaux","text":"object class data.frame 1 rows 5 columns.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_bordeaux.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color palette bordeaux — pal_bordeaux","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/pal_bordeaux.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color palette bordeaux — pal_bordeaux","text":"","code":"pal_bordeaux #>   bordeaux1 bordeaux2 bordeaux3 bordeaux4 bordeaux5 #> 1   #D2A6B4   #BC7A8F   #A54D69   #8E2043   #771434 dim(pal_bordeaux)  # 1 5 #> [1] 1 5 pal_bordeaux[4]    # preferred (named) color \"bordeaux4\" #>   bordeaux4 #> 1   #8E2043 pal_bordeaux[[4]]  # preferred color \"bordeaux4\" OR \"#8E2043\" #> [1] \"#8E2043\"  # Plotting palette: seecol(pal_bordeaux)"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_grau.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color palette grau — pal_grau","title":"uni.kn color palette grau — pal_grau","text":"pal_grau provides additional uni.kn color palette data frame containing 5 colors (shades Grau grey).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_grau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color palette grau — pal_grau","text":"","code":"pal_grau"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_grau.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color palette grau — pal_grau","text":"object class data.frame 1 rows 5 columns.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_grau.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color palette grau — pal_grau","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/pal_grau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color palette grau — pal_grau","text":"","code":"pal_grau #>     grau1   grau2   grau3   grau4   grau5 #> 1 #E1E2E5 #B8BCC1 #9AA0A7 #73787E #4D5054 dim(pal_grau)  # 1 5 #> [1] 1 5 pal_grau[3]    # preferred (named) color \"grau3\" #>     grau3 #> 1 #9AA0A7 pal_grau[[3]]  # preferred color \"grau3\" OR \"#9AA0A7\" #> [1] \"#9AA0A7\"  # Plotting palette: seecol(pal_grau)"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_karpfenblau.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color palette karpfenblau — pal_karpfenblau","title":"uni.kn color palette karpfenblau — pal_karpfenblau","text":"pal_karpfenblau provides additional uni.kn color palette data frame containing 5 colors (shades Karpfenblau blue carp).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_karpfenblau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color palette karpfenblau — pal_karpfenblau","text":"","code":"pal_karpfenblau"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_karpfenblau.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color palette karpfenblau — pal_karpfenblau","text":"object class data.frame 1 rows 5 columns.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_karpfenblau.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color palette karpfenblau — pal_karpfenblau","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/pal_karpfenblau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color palette karpfenblau — pal_karpfenblau","text":"","code":"pal_karpfenblau #>   karpfenblau1 karpfenblau2 karpfenblau3 karpfenblau4 karpfenblau5 #> 1      #B4BCD6      #8290BB      #586BA4      #3E5496      #324376 dim(pal_karpfenblau)  # 1 5 #> [1] 1 5 pal_karpfenblau[4]    # preferred (named) color \"karpfenblau4\" #>   karpfenblau4 #> 1      #3E5496 pal_karpfenblau[[4]]  # preferred color \"karpfenblau4\" OR \"#3E5496\" #> [1] \"#3E5496\"  # Plotting palette: seecol(pal_karpfenblau)"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_peach.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color palette peach — pal_peach","title":"uni.kn color palette peach — pal_peach","text":"pal_peach provides additional uni.kn color palette data frame containing 5 colors (shades Peach).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_peach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color palette peach — pal_peach","text":"","code":"pal_peach"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_peach.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color palette peach — pal_peach","text":"object class data.frame 1 rows 5 columns.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_peach.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color palette peach — pal_peach","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/pal_peach.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color palette peach — pal_peach","text":"","code":"pal_peach #>    peach1  peach2  peach3  peach4  peach5 #> 1 #FEE2DD #FECFC7 #FFB8AC #FEA090 #FF8E7B dim(pal_peach)  # 1 5 #> [1] 1 5 pal_peach[4]    # preferred (named) color \"peach4\"  #>    peach4 #> 1 #FEA090 pal_peach[[4]]  # preferred color \"peach4\" OR \"#FEA090\" #> [1] \"#FEA090\"  # Plotting palette: seecol(pal_peach)"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_petrol.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color palette petrol — pal_petrol","title":"uni.kn color palette petrol — pal_petrol","text":"pal_petrol provides additional uni.kn color palette data frame containing 5 colors (shades Petrol grue).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_petrol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color palette petrol — pal_petrol","text":"","code":"pal_petrol"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_petrol.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color palette petrol — pal_petrol","text":"object class data.frame 1 rows 5 columns.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_petrol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color palette petrol — pal_petrol","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details, https://en.wikipedia.org/wiki/New_riddle_of_induction portmanteau \"grue\".","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/pal_petrol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color palette petrol — pal_petrol","text":"","code":"pal_petrol #>   petrol1 petrol2 petrol3 petrol4 petrol5 #> 1 #9CC6CF #6AAAB7 #398D9F #077187 #035F72 dim(pal_petrol)  # 1 5 #> [1] 1 5 pal_petrol[4]    # preferred (named) color \"petrol4\" #>   petrol4 #> 1 #077187 pal_petrol[[4]]  # preferred color \"petrol4\" OR \"#077187\" #> [1] \"#077187\"  # Plotting palette: seecol(pal_petrol)"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_pinky.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color palette pinky — pal_pinky","title":"uni.kn color palette pinky — pal_pinky","text":"pal_pinky provides additional uni.kn color palette data frame containing 5 colors (shades Pinky pink).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_pinky.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color palette pinky — pal_pinky","text":"","code":"pal_pinky"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_pinky.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color palette pinky — pal_pinky","text":"object class data.frame 1 rows 5 columns.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_pinky.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color palette pinky — pal_pinky","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/pal_pinky.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color palette pinky — pal_pinky","text":"","code":"pal_pinky #>    pinky1  pinky2  pinky3  pinky4  pinky5 #> 1 #F3BFCB #ECA0B2 #E68098 #E0607E #CA4A68 dim(pal_pinky)  # 1 5 #> [1] 1 5 pal_pinky[4]    # preferred (named) color \"pinky4\" #>    pinky4 #> 1 #E0607E pal_pinky[[4]]  # preferred color \"pinky4\" OR \"#E0607E\" #> [1] \"#E0607E\"  # Plotting palette: seecol(pal_pinky)"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_seeblau.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color palette seeblau — pal_seeblau","title":"uni.kn color palette seeblau — pal_seeblau","text":"pal_seeblau provides additional uni.kn color palette data frame containing 5 colors (shades Seeblau).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_seeblau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color palette seeblau — pal_seeblau","text":"","code":"pal_seeblau"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_seeblau.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color palette seeblau — pal_seeblau","text":"object class data.frame 1 rows 5 columns.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_seeblau.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color palette seeblau — pal_seeblau","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/pal_seeblau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color palette seeblau — pal_seeblau","text":"","code":"pal_seeblau #>   seeblau1 seeblau2 seeblau3 seeblau4 seeblau5 #> 1  #CCEEF9  #A6E1F4  #59C7EB  #00A9E0  #008ECE dim(pal_seeblau)  # 1 5 #> [1] 1 5  # Preferred color: pal_seeblau[3]    # preferred (named) color \"seeblau3\" (as df) #>   seeblau3 #> 1  #59C7EB pal_seeblau[[3]]  # preferred color value \"#59C7EB\" #> [1] \"#59C7EB\"  # Access by position: pal_seeblau[3]    # named color \"seeblau3\" (as df) #>   seeblau3 #> 1  #59C7EB pal_seeblau[[3]]  # color value \"#59C7EB\" #> [1] \"#59C7EB\"  # Access by name:  pal_unikn[\"seeblau3\"]    # color \"seeblau3\" (as df)  #>   seeblau3 #> 1  #59C7EB pal_unikn[[\"seeblau3\"]]  # color value \"#59C7EB\" #> [1] \"#59C7EB\"  # Plotting palette: seecol(pal_seeblau)"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_seegruen.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color palette seegruen — pal_seegruen","title":"uni.kn color palette seegruen — pal_seegruen","text":"pal_seegruen provides additional uni.kn color palette data frame containing 5 colors (shades Seegruen).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_seegruen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color palette seegruen — pal_seegruen","text":"","code":"pal_seegruen"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_seegruen.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color palette seegruen — pal_seegruen","text":"object class data.frame 1 rows 5 columns.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_seegruen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color palette seegruen — pal_seegruen","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/pal_seegruen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color palette seegruen — pal_seegruen","text":"","code":"pal_seegruen #>   seegruen1 seegruen2 seegruen3 seegruen4 seegruen5 #> 1   #71D1CC   #54BFB7   #0AA398   #0A9086   #067E79 dim(pal_seegruen)  # 1 5 #> [1] 1 5 pal_seegruen[4]    # preferred (named) color \"seegruen4\" #>   seegruen4 #> 1   #0A9086 pal_seegruen[[4]]  # preferred color \"seegruen4\" OR \"#0A9086\" #> [1] \"#0A9086\"  # Plotting palette: seecol(pal_seegruen)"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_signal.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color palette signal (Ampel colors) — pal_signal","title":"uni.kn color palette signal (Ampel colors) — pal_signal","text":"pal_signal provides additional uni.kn color palette data frame containing 3 colors (Ampel traffic signal colors).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color palette signal (Ampel colors) — pal_signal","text":"","code":"pal_signal"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_signal.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color palette signal (Ampel colors) — pal_signal","text":"object class data.frame 1 rows 3 columns.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_signal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color palette signal (Ampel colors) — pal_signal","text":"colors arranged traffic light (\"Ampel\"): top: red \"bad\" mid: yellow \"alert\" bot: green \"good\" See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/pal_signal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color palette signal (Ampel colors) — pal_signal","text":"","code":"pal_signal #>   signal1 signal2 signal3 #> 1 #D01556 #EFDC60 #7CCA89 dim(pal_signal)  # 1 3 #> [1] 1 3 pal_signal[2]    # (named) color \"signal2\" #>   signal2 #> 1 #EFDC60 pal_signal[[2]]  # color \"signal2\" OR \"#EFDC60\" #> [1] \"#EFDC60\"  # Plotting palette: seecol(pal_signal)"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn default color palette (11 colors) — pal_unikn","title":"uni.kn default color palette (11 colors) — pal_unikn","text":"pal_unikn combines 5 shades blue colors color palette pal_seeblau 6 non-blue colors pal_unikn_web divergent palette 11 colors.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn default color palette (11 colors) — pal_unikn","text":"","code":"pal_unikn"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn default color palette (11 colors) — pal_unikn","text":"object class data.frame 1 rows 11 columns.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn default color palette (11 colors) — pal_unikn","text":"Adding seeblau5 (.e., pal_seeblau[1]) default color palette pal_unikn also puts white central (middle) position color palette 11 values: pal_unikn[[6]] white \"#FFFFFF\". divergent palette useful creating color gradients. See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn default color palette (11 colors) — pal_unikn","text":"","code":"pal_unikn #>   seeblau5 seeblau4 seeblau3 seeblau2 seeblau1   white seegrau1 seegrau2 #> 1  #008ECE  #00A9E0  #59C7EB  #A6E1F4  #CCEEF9 #FFFFFF  #E5E5E5  #CCCCCC #>   seegrau3 seegrau4   black #> 1  #999999  #666666 #000000 dim(pal_unikn)  # 1 11 #> [1]  1 11  # Access by position: pal_unikn[1]    # new color \"seeblau5\" (as df) #>   seeblau5 #> 1  #008ECE pal_unikn[[1]]  # new color value \"#008ECE\" #> [1] \"#008ECE\"  # Access by name:  pal_unikn[\"seeblau5\"]   # new color \"seeblau5\" (as df)  #>   seeblau5 #> 1  #008ECE pal_unikn[[\"seeblau5\"]] # new color value \"#008ECE\" #> [1] \"#008ECE\"  # Viewing/using color palette: seecol(pal_unikn)  demopal(pal_unikn, type = \"curve\", main = \"Default colors of Konstanz University\")   # Note: pal_unikn[6] # \"white\" or \"#FFFFFF\" as central of 11 colors #>     white #> 1 #FFFFFF"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_dark.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color palette of dark colors (10 colors) — pal_unikn_dark","title":"uni.kn color palette of dark colors (10 colors) — pal_unikn_dark","text":"pal_unikn_dark provides additional uni.kn color palette collects 2 dark colors 5 color palettes data frame containing 10 colors (5 pairs).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_dark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color palette of dark colors (10 colors) — pal_unikn_dark","text":"","code":"pal_unikn_dark"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_dark.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color palette of dark colors (10 colors) — pal_unikn_dark","text":"object class data.frame 1 rows 10 columns.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_dark.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color palette of dark colors (10 colors) — pal_unikn_dark","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_dark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color palette of dark colors (10 colors) — pal_unikn_dark","text":"","code":"pal_unikn_dark #>   karpfenblau5 karpfenblau3 bordeaux5 bordeaux3 petrol5 petrol3  pinky5  pinky3 #> 1      #324376      #586BA4   #771434   #A54D69 #035F72 #398D9F #CA4A68 #E68098 #>     grau5   grau3 #> 1 #4D5054 #9AA0A7 dim(pal_unikn_dark)  # 1 8  #> [1]  1 10 pal_unikn_dark[1]    # color \"karpfenblau5\" by position #>   karpfenblau5 #> 1      #324376 pal_unikn_dark[[1]]  # color value by position: #324376\" #> [1] \"#324376\" pal_unikn_dark[\"karpfenblau5\"]  # color value by name #>   karpfenblau5 #> 1      #324376  # Viewing/using color palette: seecol(pal_unikn_dark)  demopal(pal_unikn_dark, type = \"points\", main = \"Dark colors of Konstanz University\")"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_light.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color palette of light colors (10 colors) — pal_unikn_light","title":"uni.kn color palette of light colors (10 colors) — pal_unikn_light","text":"pal_unikn_light provides additional uni.kn color palette collects 2 light colors 5 color palettes data frame containing 10 colors (5 pairs).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_light.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color palette of light colors (10 colors) — pal_unikn_light","text":"","code":"pal_unikn_light"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_light.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color palette of light colors (10 colors) — pal_unikn_light","text":"object class data.frame 1 rows 10 columns.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_light.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color palette of light colors (10 colors) — pal_unikn_light","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_light.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color palette of light colors (10 colors) — pal_unikn_light","text":"","code":"pal_unikn_light #>   seeblau3 seeblau1  peach3  peach1 seegruen3 seegruen1  pinky2  pinky1   grau2 #> 1  #59C7EB  #CCEEF9 #FFB8AC #FEE2DD   #0AA398   #71D1CC #ECA0B2 #F3BFCB #B8BCC1 #>     grau1 #> 1 #E1E2E5 dim(pal_unikn_light)  # 1 10  #> [1]  1 10  # Access by position: pal_unikn_light[1]    # color \"seeblau3\" (as df) #>   seeblau3 #> 1  #59C7EB pal_unikn_light[[1]]  # color value \"#59C7EB\"  #> [1] \"#59C7EB\"  # Access by name:  pal_unikn_light[\"seeblau3\"]   # color \"seeblau3\" (as df)  #>   seeblau3 #> 1  #59C7EB pal_unikn_light[[\"seeblau3\"]] # color value \"#59C7EB\"   #> [1] \"#59C7EB\"  # Viewing/using color palette: seecol(pal_unikn_light)  demopal(pal_unikn_light, type = \"bar\", main = \"Light colors of Konstanz University\")"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color palette of pairwise colors (16 colors) — pal_unikn_pair","title":"uni.kn color palette of pairwise colors (16 colors) — pal_unikn_pair","text":"pal_unikn_pair provides additional uni.kn color palette collects 16 paired colors 8 color palettes data frame containing 16 colors (8 pairs).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color palette of pairwise colors (16 colors) — pal_unikn_pair","text":"","code":"pal_unikn_pair"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_pair.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color palette of pairwise colors (16 colors) — pal_unikn_pair","text":"object class data.frame 1 rows 16 columns.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_pair.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color palette of pairwise colors (16 colors) — pal_unikn_pair","text":"See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_pair.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color palette of pairwise colors (16 colors) — pal_unikn_pair","text":"","code":"pal_unikn_pair #>   karpfenblau4 karpfenblau2 seeblau5 seeblau3 petrol4 petrol2 seegruen4 #> 1      #3E5496      #8290BB  #008ECE  #59C7EB #077187 #6AAAB7   #0A9086 #>   seegruen2 bordeaux4 bordeaux2  pinky4  pinky2  peach4  peach2   grau2   grau1 #> 1   #54BFB7   #8E2043   #BC7A8F #E0607E #ECA0B2 #FEA090 #FECFC7 #B8BCC1 #E1E2E5 dim(pal_unikn_pair)  # 1 16 #> [1]  1 16 pal_unikn_pair[1]    # color \"karpfenblau4\" by position #>   karpfenblau4 #> 1      #3E5496 pal_unikn_pair[[1]]  # color value by position: #3E5496\" #> [1] \"#3E5496\" pal_unikn_pair[\"karpfenblau4\"]  # color value by name #>   karpfenblau4 #> 1      #3E5496  # Viewing/using color palette: seecol(pal_unikn_pair)  demopal(pal_unikn_pair, type = \"polygon\", main = \"A pair-wise color palette\")"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_ppt.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn secondary color palette (ppt version) — pal_unikn_ppt","title":"uni.kn secondary color palette (ppt version) — pal_unikn_ppt","text":"pal_unikn_ppt provides alternative uni.kn color palette data frame containing 10 colors.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_ppt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn secondary color palette (ppt version) — pal_unikn_ppt","text":"","code":"pal_unikn_ppt"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_ppt.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn secondary color palette (ppt version) — pal_unikn_ppt","text":"object class data.frame 1 rows 10 columns.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_ppt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn secondary color palette (ppt version) — pal_unikn_ppt","text":"secondary (ppt) variant muted colors. See pal_unikn primary/default (web/sRGB) scale https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_ppt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn secondary color palette (ppt version) — pal_unikn_ppt","text":"","code":"pal_unikn_ppt #>   seeblau4 seeblau3 seeblau2 seeblau1   white seegrau1 seegrau2 seegrau3 #> 1  #009AD1  #59B6DC  #A0D3E6  #C8E5EF #FFFFFF  #E5E5E5  #CCCCCC  #999999 #>   seegrau4   black #> 1  #666666 #000000 dim(pal_unikn_ppt)  # 1 10 #> [1]  1 10  # Access by position: pal_unikn_ppt[2]    # 2nd named color \"seeblau3\" (as df) #>   seeblau3 #> 1  #59B6DC pal_unikn_ppt[[2]]  # 2nd color value \"#59B6DC\" #> [1] \"#59B6DC\"  # Access by name:  pal_unikn_ppt[\"seeblau3\"]    # color \"seeblau3\" (as df) #>   seeblau3 #> 1  #59B6DC pal_unikn_ppt[[\"seeblau3\"]]  # color value \"#59B6DC\" #> [1] \"#59B6DC\"  # Plotting palette: seecol(pal_unikn_ppt)"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_pref.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn color palette of preferred colors (9 colors) — pal_unikn_pref","title":"uni.kn color palette of preferred colors (9 colors) — pal_unikn_pref","text":"pal_unikn_pref provides additional uni.kn color palette collects preferred color palette data frame containing 9 (8 + 1) colors.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_pref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn color palette of preferred colors (9 colors) — pal_unikn_pref","text":"","code":"pal_unikn_pref"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_pref.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn color palette of preferred colors (9 colors) — pal_unikn_pref","text":"object class data.frame 1 rows 9 columns.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_pref.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn color palette of preferred colors (9 colors) — pal_unikn_pref","text":"colors arranged sequence provides high contrasts adjacent colors. Note (alert) color Signal preferred color according official color definition. See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_pref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn color palette of preferred colors (9 colors) — pal_unikn_pref","text":"","code":"pal_unikn_pref #>   Seeblau   Pinky Seegruen   Peach Karpfenblau  Signal Bordeaux    Grau  Petrol #> 1 #59C7EB #E0607E  #0A9086 #FEA090     #3E5496 #EFDC60  #8E2043 #9AA0A7 #077187 dim(pal_unikn_pref)  # 1 9 #> [1] 1 9  # Access by position: pal_unikn_pref[1]    # color Seeblau (as df) #>   Seeblau #> 1 #59C7EB pal_unikn_pref[[1]]  # color value \"#59C7EB\"  #> [1] \"#59C7EB\"  # Access by name:  pal_unikn_pref[\"Seeblau\"]   # color \"seeblau3\" (as df)  #>   Seeblau #> 1 #59C7EB pal_unikn_pref[[\"Seeblau\"]] # color value \"#59C7EB\"  #> [1] \"#59C7EB\"  # Viewing/using color palette: seecol(pal_unikn_pref)  demopal(pal_unikn_pref, type = \"mosaic\", main = \"Preferred colors of Konstanz University\")"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_web.html","id":null,"dir":"Reference","previous_headings":"","what":"uni.kn default color palette (web version) — pal_unikn_web","title":"uni.kn default color palette (web version) — pal_unikn_web","text":"pal_unikn_web provides default uni.kn color palette data frame containing 10 colors.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_web.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uni.kn default color palette (web version) — pal_unikn_web","text":"","code":"pal_unikn_web"},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_web.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"uni.kn default color palette (web version) — pal_unikn_web","text":"object class data.frame 1 rows 10 columns.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_web.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uni.kn default color palette (web version) — pal_unikn_web","text":"primary (web/sRGB) scale. Note pal_unikn provides divergent color palette (11 colors). See https://www.uni-konstanz.de/en/university/news--media/create-online--print-media/corporate-design/ details.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/pal_unikn_web.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uni.kn default color palette (web version) — pal_unikn_web","text":"","code":"pal_unikn_web #>   seeblau4 seeblau3 seeblau2 seeblau1   white seegrau1 seegrau2 seegrau3 #> 1  #00A9E0  #59C7EB  #A6E1F4  #CCEEF9 #FFFFFF  #E5E5E5  #CCCCCC  #999999 #>   seegrau4   black #> 1  #666666 #000000 dim(pal_unikn_web)  # 1 10 #> [1]  1 10  # Access by position: pal_unikn_web[2]    # 2nd named color \"seeblau3\" (as df) #>   seeblau3 #> 1  #59C7EB pal_unikn_web[[2]]  # 2nd color value \"#59C7EB\" #> [1] \"#59C7EB\"  # Access by name:  pal_unikn_web[\"seeblau3\"]    # color \"seeblau3\" (as df) #>   seeblau3 #> 1  #59C7EB pal_unikn_web[[\"seeblau3\"]]  # color value \"#59C7EB\" #> [1] \"#59C7EB\"  # Plotting palette: seecol(pal_unikn_web)"},{"path":"https://hneth.github.io/unikn/dev/reference/post.html","id":null,"dir":"Reference","previous_headings":"","what":"Post text (in an xbox) — post","title":"Post text (in an xbox) — post","text":"post plots 1 text strings (provided character vector labels) (existing new) xbox.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post text (in an xbox) — post","text":"","code":"post(   labels,   x = 0.03,   y = 0.55,   x_layout = NA,   y_layout = \"even\",   col = \"white\",   col_bg = Seeblau,   cex = 1,   font = 1,   new_plot = \"none\" )"},{"path":"https://hneth.github.io/unikn/dev/reference/post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post text (in an xbox) — post","text":"labels character vector specifying text labels plotted. x numeric vector x-coordinates text labels labels written. lengths x y differ, shorter one recycled. Default: x = .03. y numeric vector y-coordinates text labels labels written. lengths x y differ, shorter one recycled. Default: y = .55. x_layout optional numeric vector character string control horizontal positions labels. Numeric values interpreted increments values x recycled (enable stepwise alternating patterns). 3 character string options : \"center\" (.e., center wrt. first label plot center), \"left\" (.e., left wrt. first label plot center), \"right\" (.e., right wrt. first label plot center). Default: x_layout = NA (.e., using values x). y_layout numeric value character string control vertical positions labels. Numeric values interpreted increments values y[1] recycled (enable stepwise alternating patterns). 2 character string options : \"even\" (.e., even distribution labels across available y-space) \"flush\" (.e., space adjacent labels, .e., y_layout = 0). Default: y_layout = \"even\". col color(s) text label(s). Default: col_lbl = \"white\". col_bg background color(s) xbox. Default: col_bg = Seeblau. cex Numeric character expansion factor(s), multiplied par(\"cex\") yield character size(s). Default: cex = 1.0. font font type(s) used. Default: font = 1 (.e., plain text). new_plot new plot generated? Set \"xbox\" plot basic xbox (square dimensions, .e., dim = c(1, 1)). Default: new_plot = \"none\" (.e., assumes pre-existing xbox).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/post.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Post text (in an xbox) — post","text":"positions text elements labels can specified providing coordinates (x y arguments) providing initial position y_layout (see ). Text formatting parameters (like col, col_bg, cex, font) recycled match length(labels). post uses base graphics system graphics::.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/post.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post text (in an xbox) — post","text":"","code":"# Create a new xbox:  post(labels = \"This is a test.\", new_plot = \"xbox\",       cex = 1.2, font = 2, col_bg = pal_seeblau[[5]])  # Add text to an existing xbox:  post(labels = c(\"More text follows here,\",               \"yet another line here,\",               \"and even more here.\"),                y = .4, y_layout = .04,                new_plot = \"none\")                 # Using x_layout and y_layout: post(labels = c(\"Ene,\", \"mene, miste,\", \"es rappelt\", \"in der Kiste.\"),       cex = 1.4, font = 2, col = \"white\", col_bg = Pinky,       x = .1, y = .5, x_layout = \"left\", y_layout = .05, new_plot = \"xbox\")        post(labels = c(\"Hello world!\", \"Does this work?\", \"That's good!\", \"Please carry on...\"),       cex = 1.4, font = 2, col = \"white\", col_bg = Karpfenblau,       x = .01, y = .6, x_layout = .10, y_layout = .05, new_plot = \"xbox\")"},{"path":"https://hneth.github.io/unikn/dev/reference/seecol.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot color palettes (to see their colors) — seecol","title":"Plot color palettes (to see their colors) — seecol","text":"seecol provides interface plotting (\"seeing\") colors palette comparing multiple color palettes.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/seecol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot color palettes (to see their colors) — seecol","text":"","code":"seecol(   pal = \"unikn_all\",   n = \"all\",   alpha = NA,   hex = NULL,   rgb = NULL,   col_bg = NULL,   col_brd = NULL,   lwd_brd = NULL,   grid = TRUE,   scale_x = FALSE,   main = NA,   sub = NULL,   title = NULL,   mar_note = NA,   pal_names = NA,   ... )"},{"path":"https://hneth.github.io/unikn/dev/reference/seecol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot color palettes (to see their colors) — seecol","text":"pal single color palette (vector colors), multiple color palettes (list), recognized keyword (character string). Default: pal = \"unikn_all\" (.e., plot color palettes provided unikn package). Recognized keywords : \"\": color palettes unikn package. \"all_unikn\" \"unikn_all\": uni.kn color palettes   (University Konstanz). \"unikn_basic\": basic uni.kn palettes. \"grad_all\": uni.kn palettes color gradients. \"pair_all\": uni.kn palettes pairwise colors. \"pref_all\": preferred uni.kn colors gradients. \"add\": Additional/contributed color palettes   (deprecated, additional color palettes migrated unicol R package). seecol also recognize keywords (e.g., \"all_unikn\") keywords without \"unikn\" (e.g., \"basic\"). n Number colors show use. n lower higher length current color palette pal, color palette reduced extrapolated (using grDevices::colorRampPalette). Default: n = \"\" (.e., show colors palette). alpha factor modifying opacity alpha (alpha.f adjustcolor) value [0, 1]. Default: alpha = NA (.e., modification opacity). hex HEX color values shown? Default: hex = NULL (.e., show HEX color values sufficient space print ). rgb RGB color values shown? Default: rgb = NULL (.e., show RGB color values sufficient space print ). col_bg Color plot background. Default: col_bg = NULL. col_brd Color shape borders (shown). Default: col_brd = NULL. lwd_brd Line width shape borders (shown). Default: lwd_brd = NULL. grid Show grid color plot? Default: grid = TRUE. scale_x Scale color shapes (comparing multiple palettes) fixed total width? Default: scale_x = FALSE. main Main plot title (character string). Default: main = NA creates default title. sub Optional subtitle (character string). Default: sub = NULL (.e., subtitle). title Deprecated plot title. Use main instead. mar_note Optional margin note (bottom right). Default: mar_note = NA (.e., margin note). pal_names Names color palettes colors (character vector). Default: pal_names = NA (default names). ... graphical parameters (passed plot).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/seecol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot color palettes (to see their colors) — seecol","text":"seecol two main modes, based contents pal argument: pal set specific color palette (vector multiple colors color palettes): Plot current color palette optional details colors. pal = \"unikn_all\" list multiple color palettes: Plot visual vectors current color palettes comparing . Specifying distinct = TRUE removes visual duplicate colors (based HEX values, ignoring transparency), showing individual color palette pal. Various title options (.e., main, sub, mar_note) pal_names argument add control plotted text labels. However, length character vector provided pal_names must correspond number (custom) color palettes colors.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/seecol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot color palettes (to see their colors) — seecol","text":"","code":"# See multiple color palettes:  seecol()  # default: seecol(pal = \"all\")    # See details of one color palette:  seecol(pal_unikn)  # see a specific color palette   # Combining colors or color palettes:  seecol(c(rev(pal_seeblau), pal_seegruen))        # combine color palettes  seecol(c(rev(pal_seeblau), \"white\", pal_pinky))  # combine color palettes and color names  seecol(c(\"black\", \"firebrick\", \"gold\"))          # combine color names   # Scale a set of color palettes to a fixed width: seecol(scale_x = TRUE)   # Using n to reduce or extend color palettes: seecol(n =  3)  # viewing reduced ranges of all palettes  seecol(n = 12)  # viewing extended ranges of all palettes   seecol(pal_unikn, n = 5,         main = \"Reduced version of pal_unikn (n = 5)\")  # reducing pal_unikn  seecol(pal_seeblau, n = 8,         main = \"Extended version of pal_seeblau (n = 8)\")  # extending pal_seeblau   # Combining and extending color palettes:  seecol(c(rev(pal_seeblau), \"white\", pal_bordeaux), n = 17,         main = \"Diverging custom color palette (with 17 colors)\")   # Defining custom color palettes: pal_mpg <- c(\"#007367\", \"white\", \"#D0D3D4\")  # mixing hex values and color names names(pal_mpg) <- c(\"mpg green\", \"mpg white\", \"mpg grey\")  # color names  pal_bdg <- usecol(c(Bordeaux, \"gold\"), n = 5)  # using usecol  # Viewing extended color palette:  seecol(pal_mpg, n = 9, main = \"Custom color palette of the Max Planck Society\")   # Comparing (and labeling) custom color palettes:  seecol(list(pal_mpg, pal_bdg, pal_unikn), scale_x = TRUE,        pal_names = c(\"Max Planck\", \"Bordeaux-Gold\", \"Uni Konstanz\"),         main = \"Comparing and labeling custom color palettes\")   ## Viewing color palettes from other packages:  # library(RColorBrewer) # seecol(brewer.pal(name = \"RdBu\", n = 11))  # viewing \"RdBu\" palette from RColorBrewer  ## Extending color palettes: # seecol(brewer.pal(name = \"RdBu\", n = 11), n = 15)  # extending palette to 15 colors"},{"path":"https://hneth.github.io/unikn/dev/reference/shades_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Get n shades of a color — shades_of","title":"Get n shades of a color — shades_of","text":"shades_of returns vector n colors shades color gradient ranging initial color col_1 final color col_n.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/shades_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get n shades of a color — shades_of","text":"","code":"shades_of(n = 5, col_1 = \"black\", col_n = \"white\", alpha = NA)"},{"path":"https://hneth.github.io/unikn/dev/reference/shades_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get n shades of a color — shades_of","text":"n Number desired colors. Default: n = 5. col_1 Initial color. Default: col_1 = \"black\". col_n Final (n-th) color. Default: col_n = \"white\". alpha factor modifying opacity alpha (alpha.f adjustcolor) value [0, 1]. Default: alpha = NA (.e., modification opacity).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/shades_of.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get n shades of a color — shades_of","text":"default, color gradient returned contains n = 5 colors range initial color col_1 = \"black\" final color col_n = \"white\". Specifying different values n initial final colors yields different color ranges. shades_of mostly wrapper special usecol command. However, usecol allows defining complex color gradients (e.g., specifying two colors).","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/shades_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get n shades of a color — shades_of","text":"","code":"grey50 <- shades_of(50, col_1 = 'grey1') seecol(grey50, main = \"50 shades of grey1\")   blue_black <- shades_of(5, Seeblau, col_n = \"black\") seecol(blue_black, main = \"5 shades from Seeblau to black\")   wine_white <- shades_of(6, Bordeaux, alpha = 1/2) seecol(wine_white, col_brd = \"black\", lwd_brd = .5,         main = \"Shades of semi-transparent Bordeaux\")"},{"path":"https://hneth.github.io/unikn/dev/reference/simcol.html","id":null,"dir":"Reference","previous_headings":"","what":"Find similar colors — simcol","title":"Find similar colors — simcol","text":"simcol finds shows colors palette color candidates col_candidates similar target color col_target.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/simcol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find similar colors — simcol","text":"","code":"simcol(   col_target,   col_candidates = colors(),   tol = c(25, 50, 75),   distinct = TRUE,   plot = TRUE )"},{"path":"https://hneth.github.io/unikn/dev/reference/simcol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find similar colors — simcol","text":"col_target (required) target color. col_candidates palette color candidates considered. Default: col_candidates = colors(). tol Numeric tolerance value(s) (either 1 3 numeric values, RGB range 0 255). Values considered order RGB value rank col_target. Default: tol = c(25, 50, 75). distinct Boolean: Return visually distinct colors? Default: distinct = TRUE (.e., remove visual duplicates). plot Boolean: Plot output (using seecol)? Default: plot = TRUE.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/simcol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find similar colors — simcol","text":"named vector colors color values.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/simcol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find similar colors — simcol","text":"simcol returns vector (named) colors color values col_candidates (set colors() grDevices per default) similar specified target color col_target. plot = TRUE, simcol also visualizes detected colors (passing result seecol, side-effect). Color similarity defined terms distance colors' RGB values, must within numeric tolerance threshold(s) specified tol (0 <= tol <= 255). Higher tol values correspond permissive similarity judgments. tol scalar, values three RGB dimensions col_candidates must within corresponding values col_target judged 'similar'. tol contains three values, three RGB dimension compared order dimensions' rank col_target (.e., primary dimension must within tol[1], etc.). Thus, providing three tol values allows fine-grained similarity matching.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/simcol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find similar colors — simcol","text":"","code":"# Basic uses: simcol(col_target = \"red\")  #>          red   firebrick1   firebrick2    orangered   orangered2         red2  #>        \"red\" \"firebrick1\" \"firebrick2\"  \"orangered\" \"orangered2\"       \"red2\"  simcol(\"tan\", tol = 15)  #>            tan      burlywood     burlywood3   navajowhite3     peachpuff3  #>          \"tan\"    \"burlywood\"   \"burlywood3\" \"navajowhite3\"   \"peachpuff3\"  #>         wheat3  #>       \"wheat3\"  simcol(Seeblau, tol = c(20, 30, 40))  #>      Seeblau     skyblue2   steelblue1   steelblue2  #>    \"#59C7EB\"   \"skyblue2\" \"steelblue1\" \"steelblue2\"  simcol(\"blue\", col_candidates = pal_unikn_pref, tol = 120)  #>        blue Karpfenblau      Petrol  #>      \"blue\"   \"#3E5496\"   \"#077187\"   # Fine-tuning the range of color matching: simcol(Seeblau, tol = 30)  # = simcol(Seeblau, tol = c(30, 30, 30))  #>      Seeblau   steelblue1   steelblue2    turquoise  #>    \"#59C7EB\" \"steelblue1\" \"steelblue2\"  \"turquoise\"  simcol(Seeblau, tol = c(20, 20, 80))  #>         Seeblau    lightskyblue   lightskyblue2         skyblue        skyblue1  #>       \"#59C7EB\"  \"lightskyblue\" \"lightskyblue2\"       \"skyblue\"      \"skyblue1\"  #>        skyblue2      steelblue1  #>      \"skyblue2\"    \"steelblue1\"   # Increasing tolerance widens range: simcol(\"grey\", c(\"white\", \"grey\", \"black\"), tol = 255, distinct = FALSE, plot = FALSE) #>    gray   white    gray   black  #>  \"grey\" \"white\"  \"grey\" \"black\""},{"path":"https://hneth.github.io/unikn/dev/reference/slide.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a slide (or frame) — slide","title":"Plot a slide (or frame) — slide","text":"slide plots empty slide (frame) colored rectangle.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/slide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a slide (or frame) — slide","text":"","code":"slide(col = NA, dim = c(4/3, 1), border = grey(0.33, 1), lwd = 1.5)"},{"path":"https://hneth.github.io/unikn/dev/reference/slide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a slide (or frame) — slide","text":"col color fill slide (.e., background color). Default: col = NA (.e., system default transparency). dim x- y-dimensions slide. Default: dim = c(4/3, 1) (.e., unit height, 4/3 wider high). border color slide's border. Setting border = NA hides border. Default: border = grey(.33, 1). lwd line width slide's border. Setting lwd = 0 lwd = NA removes border. Default: lwd = 1.5.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/slide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a slide (or frame) — slide","text":"","code":"slide()  # default slide (or frame)  slide(lwd = NA)  # borderless slide   # Dimensions:  slide(dim = c(18, 9))   # larger and 2:1 dimensions  slide(dim = c(1/3, 1))  # smaller and 1:3 dimensions   # Formatting: slide(col = pal_seeblau[[1]], border = pal_seeblau[[5]], lwd = 2)"},{"path":"https://hneth.github.io/unikn/dev/reference/theme_bwkn.html","id":null,"dir":"Reference","previous_headings":"","what":"An alternative bw theme (for ggplot2) — theme_bwkn","title":"An alternative bw theme (for ggplot2) — theme_bwkn","text":"theme_bwkn provides alternative bw theme use ggplot2 unikn contexts.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/theme_bwkn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An alternative bw theme (for ggplot2) — theme_bwkn","text":"","code":"theme_bwkn(   col_title = grey(0.1, 1),   col_line = grey(0.4, 1),   base_size = 12,   base_family = \"sans\",   base_line_size = base_size/22,   base_rect_size = base_size/22,   axis_ticks_mm = 2 )"},{"path":"https://hneth.github.io/unikn/dev/reference/theme_bwkn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An alternative bw theme (for ggplot2) — theme_bwkn","text":"col_title Color text elements used plot title, axis titles, legend (optional). Default: col_title = grey(.10, 1) (.e., dark grey). Consider using col_title = unikn::pal_seeblau[[4]]. col_line Color line elements used axis lines, text ticks, plot caption subtitle, panel border. Default: col_line = grey(.40, 1) (.e., medium grey). base_size Base font size (optional, numeric). Default: base_size = 12. base_family Base font family (optional, character). Default: base_family = \"sans\". Options include \"mono\", \"sans\" (default), \"serif\". base_line_size Base line size (optional, numeric). Default: base_line_size = base_size/22. base_rect_size Base rectangle size (optional, numeric). Default: base_rect_size = base_size/22. axis_ticks_mm Length axis ticks (mm). Default: axis_ticks_mm = 2.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/theme_bwkn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An alternative bw theme (for ggplot2) — theme_bwkn","text":"theme_bwkn light -nonsense, based theme_bw. theme works well visualizations require grid plot panel boundaries.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/theme_bwkn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An alternative bw theme (for ggplot2) — theme_bwkn","text":"","code":"# \\donttest{ # Plotting iris dataset (using ggplot2, theme_grau, and unikn colors):    library('ggplot2')  # theme_bwkn requires ggplot2      ggplot(datasets::iris) +   geom_jitter(aes(x = Sepal.Length, y = Sepal.Width, color = Species), size = 3, alpha = 2/3) +   facet_wrap(~Species) +   scale_color_manual(values = usecol(pal = c(Pinky, Seeblau, Seegruen))) +   labs(tag = \"C\",        title = \"Iris sepals by species (using theme_bwkn)\",        caption = \"Data from datasets::iris\") +    coord_fixed(ratio = 3/2) +    theme_bwkn()   # }"},{"path":"https://hneth.github.io/unikn/dev/reference/theme_grau.html","id":null,"dir":"Reference","previous_headings":"","what":"An alternative grey theme (for ggplot2) — theme_grau","title":"An alternative grey theme (for ggplot2) — theme_grau","text":"theme_grau provides alternative grey theme use ggplot2 unikn contexts.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/theme_grau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An alternative grey theme (for ggplot2) — theme_grau","text":"","code":"theme_grau(   col_title = grey(0, 1),   col_line = pal_grau[[3]],   base_size = 11,   base_family = \"sans\",   base_line_size = base_size/22,   base_rect_size = base_size/22,   axis_ticks_mm = 2 )"},{"path":"https://hneth.github.io/unikn/dev/reference/theme_grau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An alternative grey theme (for ggplot2) — theme_grau","text":"col_title Color title elements (optional). Default: col_title = grey(0, 1) (.e., \"black\"). Consider using col_title = unikn::pal_seeblau[[4]]. col_line Color line elements used axis ticks (optional). Default: col_line = pal_grau[[3]] (.e., medium grau). base_size Base font size (optional, numeric). Default: base_size = 11. base_family Base font family (optional, character). Default: base_family = \"sans\". Options include \"mono\", \"sans\" (default), \"serif\". base_line_size Base line size (optional, numeric). Default: base_line_size = base_size/22. base_rect_size Base rectangle size (optional, numeric). Default: base_rect_size = base_size/22. axis_ticks_mm Length axis ticks (mm). Default: axis_ticks_mm = 2.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/theme_grau.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An alternative grey theme (for ggplot2) — theme_grau","text":"theme_grau -nonsense, fills panel backgrounds \"grau\" (specifically, pal_seeggrau[[1]]). theme works well dark colors bright color accents, limited use transparent colors.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/theme_grau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An alternative grey theme (for ggplot2) — theme_grau","text":"","code":"# \\donttest{ # Plotting iris dataset (using ggplot2, theme_grau, and unikn colors):    library('ggplot2')  # theme_grau requires ggplot2      ggplot(datasets::iris) +   geom_jitter(aes(x = Sepal.Length, y = Sepal.Width, color = Species), size = 3, alpha = 2/3) +   facet_wrap(~Species) +   scale_color_manual(values = usecol(pal = c(Pinky, Seeblau, Seegruen))) +   labs(tag = \"B\",        title = \"Iris sepals by species (using theme_grau)\",        caption = \"Data from datasets::iris\") +    coord_fixed(ratio = 3/2) +    theme_grau()   # }"},{"path":"https://hneth.github.io/unikn/dev/reference/theme_minikn.html","id":null,"dir":"Reference","previous_headings":"","what":"An alternative minimal theme (for ggplot2) — theme_minikn","title":"An alternative minimal theme (for ggplot2) — theme_minikn","text":"theme_minikn provides alternative minimal theme use ggplot2 unikn contexts.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/theme_minikn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An alternative minimal theme (for ggplot2) — theme_minikn","text":"","code":"theme_minikn(   col_title = grey(0.1, 1),   col_line = grey(0.4, 1),   base_size = 12,   base_family = \"sans\",   base_line_size = base_size/22,   base_rect_size = base_size/22,   axis_ticks_mm = 1 )"},{"path":"https://hneth.github.io/unikn/dev/reference/theme_minikn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An alternative minimal theme (for ggplot2) — theme_minikn","text":"col_title Color text elements used plot, axis legend titles, well strip titles. Default: col_title = grey(.10, 1) (.e., dark grey). Consider using col_title = unikn::pal_seeblau[[4]]. col_line Color line elements used axis lines, text ticks, plot caption subtitle. Default: col_line = grey(.40, 1) (.e., medium grey). base_size Base font size (optional, numeric). Default: base_size = 12. base_family Base font family (optional, character). Default: base_family = \"sans\". Options include \"mono\", \"sans\" (default), \"serif\". base_line_size Base line size (optional, numeric). Default: base_line_size = base_size/22. base_rect_size Base rectangle size (optional, numeric). Default: base_rect_size = base_size/22. axis_ticks_mm Length axis ticks (mm). Default: axis_ticks_mm = 1.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/theme_minikn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An alternative minimal theme (for ggplot2) — theme_minikn","text":"theme_minikn minimal -nonsense, based theme_minimal. theme works well visualizations require grid lines panel boundaries.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/theme_minikn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An alternative minimal theme (for ggplot2) — theme_minikn","text":"","code":"# \\donttest{ # Plotting iris dataset (using ggplot2, theme_grau, and unikn colors):    library('ggplot2')  # theme_minikn requires ggplot2      ggplot(datasets::iris) +   geom_jitter(aes(x = Sepal.Length, y = Sepal.Width, color = Species), size = 3, alpha = 2/3) +   facet_wrap(~Species) +   scale_color_manual(values = usecol(pal = c(Pinky, Seeblau, Seegruen))) +   labs(tag = \"D\",        title = \"Iris sepals by species (using theme_minikn)\",        caption = \"Data from datasets::iris\") +    coord_fixed(ratio = 3/2) +    theme_minikn()   # }"},{"path":"https://hneth.github.io/unikn/dev/reference/theme_unikn.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic unikn theme (for ggplot2) — theme_unikn","title":"Basic unikn theme (for ggplot2) — theme_unikn","text":"theme_unikn provides basic unikn theme use ggplot2 commands.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/theme_unikn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic unikn theme (for ggplot2) — theme_unikn","text":"","code":"theme_unikn(   col_title = pal_seeblau[[4]],   col_line = grey(0.05, 1),   base_size = 11,   base_family = \"sans\",   base_line_size = base_size/22,   base_rect_size = base_size/22,   axis_ticks_mm = 2 )"},{"path":"https://hneth.github.io/unikn/dev/reference/theme_unikn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic unikn theme (for ggplot2) — theme_unikn","text":"col_title Color plot title (optional). Default: col_title = pal_seeblau[[4]]. Consider using col_title = \"black\" data use Seeblau colors. col_line Color line elements used axis lines ticks, strip panel border. Default: col_line = grey(.05, 1) (.e., dark grey). base_size Base font size (optional, numeric). Default: base_size = 11. base_family Base font family (optional, character). Default: base_family = \"sans\". Options include \"mono\", \"sans\" (default), \"serif\". base_line_size Base line size (optional, numeric). Default: base_line_size = base_size/22. base_rect_size Base rectangle size (optional, numeric). Default: base_rect_size = base_size/22. axis_ticks_mm Length axis ticks (mm). Default: axis_ticks_mm = 2.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/theme_unikn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Basic unikn theme (for ggplot2) — theme_unikn","text":"theme lightweight -nonsense, somewhat opinionated (e.g., using mostly grey scales allow emphasizing data points color accents).","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/theme_unikn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic unikn theme (for ggplot2) — theme_unikn","text":"","code":"# \\donttest{   # Plotting iris dataset (using ggplot2, theme_unikn, and unikn colors):      library('ggplot2')  # theme_unikn requires ggplot2       ggplot(datasets::iris) +     geom_jitter(aes(x = Petal.Length, y = Petal.Width, color = Species), size = 3, alpha = 2/3) +     facet_wrap(~Species) +     scale_color_manual(values = usecol(pal = c(Pinky, Seeblau, Seegruen))) +     labs(tag = \"A\", title = \"Iris petals by species (using theme_unikn)\",          caption = \"Data from datasets::iris\") +      theme_unikn()  # }"},{"path":"https://hneth.github.io/unikn/dev/reference/uline.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot underlined text elements — uline","title":"Plot underlined text elements — uline","text":"uline plots 1 text strings (provided character vector labels) (existing new) plot places colored line underneath label (underline ).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/uline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot underlined text elements — uline","text":"","code":"uline(   labels,   x = 0,   y = 0.55,   x_layout = NA,   y_layout = \"even\",   col = \"black\",   col_bg = Seeblau,   cex = 1.5,   font = 1,   new_plot = \"none\" )"},{"path":"https://hneth.github.io/unikn/dev/reference/uline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot underlined text elements — uline","text":"labels character vector specifying text labels plotted. x numeric vector x-coordinates text labels labels written. lengths x y differ, shorter one recycled. Default: x = 0. y numeric vector y-coordinates text labels labels written. lengths x y differ, shorter one recycled. Default: y = .55. x_layout optional numeric vector character string control horizontal positions labels. Numeric values interpreted increments values x recycled (enable stepwise alternating patterns). 3 character string options : \"center\" (.e., center wrt. first label plot center), \"left\" (.e., left wrt. first label plot center), \"right\" (.e., right wrt. first label plot center). Default: x_layout = NA (.e., using values x). y_layout numeric value character string control vertical positions labels. Numeric values interpreted increments values y[1] recycled (enable stepwise alternating patterns). 2 character string options : \"even\" (.e., even distribution labels across available y-space) \"flush\" (.e., space adjacent labels, .e., y_layout = 0). Default: y_layout = \"even\". col color(s) text label(s). Default: col_lbl = \"black\". col_bg color(s) line (text labels labels). Default: col_bg = Seeblau. cex Numeric character expansion factor(s), multiplied par(\"cex\") yield character size(s). Default: cex = 1.5. font font type(s) used. Default: font = 1 (.e., plain text). new_plot Boolean: new plot generated? Set \"blank\" \"slide\" create new plot. Default: new_plot = \"none\" (.e., add existing plot).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/uline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot underlined text elements — uline","text":"positions text elements labels can specified providing coordinates (x y arguments) providing initial position y_layout (see ). Text formatting parameters (like col, col_bg, cex, font) recycled match length(labels). uline uses base graphics system graphics::.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/uline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot underlined text elements — uline","text":"","code":"uline(labels = \"This is a test.\", new_plot = \"blank\")  # create a new blank plot uline(labels = \"More testing here...\", y = .33, col_bg = pal_pinky[[2]])  # add to plot   # 2 basic cases:  # (a) Underline text on an existing plot: plot(x = 0, y = 0, type = \"n\", xlim = c(0, 1), ylim = c(0, 1), xlab = \"\", ylab = \"\") uline(x = 0, y = .8, labels = \"Underline text (on an existing plot)\")  # add to plot   # (b) Underline text on a new plot: uline(x = .02, y = .80, labels = \"Underline text (on a new plot)\",       new_plot = \"slide\")  # create a new plot   # Example: lbl_line <- c(\"This is neat, true, and terribly important.\") uline(labels = lbl_line, new_plot = \"blank\")  # create a new plot uline(labels = \"(which is why we underline it).\", y = .40, cex = 1.2)  # add to plot"},{"path":"https://hneth.github.io/unikn/dev/reference/unikn.guide.html","id":null,"dir":"Reference","previous_headings":"","what":"Open the unikn package guides — unikn.guide","title":"Open the unikn package guides — unikn.guide","text":"Open unikn package guides","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/unikn.guide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open the unikn package guides — unikn.guide","text":"","code":"unikn.guide()"},{"path":"https://hneth.github.io/unikn/dev/reference/url_unikn.html","id":null,"dir":"Reference","previous_headings":"","what":"url_unikn formats an URL the uni.kn way — url_unikn","title":"url_unikn formats an URL the uni.kn way — url_unikn","text":"url_unikn removes various patterns (e.g., \"http\", \"https\", \"://\", \"www.\") front given URL returns remaining character string n-dash (Unicode \\u2013) prefix, rather former figure dash (\\u2012) prefix (latter created issues Fedora Linux systems).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/url_unikn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"url_unikn formats an URL the uni.kn way — url_unikn","text":"","code":"url_unikn(url = \"https://www.uni-konstanz.de/\")"},{"path":"https://hneth.github.io/unikn/dev/reference/url_unikn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"url_unikn formats an URL the uni.kn way — url_unikn","text":"url url written (copied web browser).","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/url_unikn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"url_unikn formats an URL the uni.kn way — url_unikn","text":"","code":"url_unikn(\"https://www.uni-konstanz.de/\") #> [1] \"– uni-konstanz.de\""},{"path":"https://hneth.github.io/unikn/dev/reference/usecol.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a color or color palette — usecol","title":"Use a color or color palette — usecol","text":"usecol allows using color color palette pal (e.g., plotting).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/usecol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a color or color palette — usecol","text":"","code":"usecol(   pal = pal_unikn,   n = \"all\",   alpha = NA,   distinct = FALSE,   use_names = FALSE,   use_col_ramp = FALSE )"},{"path":"https://hneth.github.io/unikn/dev/reference/usecol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a color or color palette — usecol","text":"pal color palette (vector colors color palettes). Default: pal = pal_unikn. n integer value specifying desired number colors palette. Default: n = \"\" (.e., use colors color palette). palettes defined unikn, n set pre-defined selection colors desired number colors smaller available number. palettes values n larger length(pal), n compresses extends palette using colorRampPalette. alpha factor modifying opacity alpha (alpha.f adjustcolor) value [0, 1]. Default: alpha = NA (.e., modification opacity). distinct Boolean: Return visually distinct colors? Default: distinct = FALSE (.e., include duplicate colors). use_names logical value indicating whether colors returned named vector. Default: use_names = FALSE, compatibility ggplot. use_col_ramp logical value specifying whether default using pre-selected colors overridden colorRampPalette used process n. Default: use_col_ramp = FALSE.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/usecol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a color or color palette — usecol","text":"(named) vector colors (type character).","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/usecol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use a color or color palette — usecol","text":"usecol also allows modifying combining color palettes various ways.","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/usecol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a color or color palette — usecol","text":"","code":"usecol(pal = pal_unikn, n = \"all\")  # default color palette  #>  [1] \"#008ECE\" \"#00A9E0\" \"#59C7EB\" \"#A6E1F4\" \"#CCEEF9\" \"#FFFFFF\" \"#E5E5E5\" #>  [8] \"#CCCCCC\" \"#999999\" \"#666666\" \"#000000\" usecol(pal = pal_unikn, n =  4)     # selecting n dedicated colors #> [1] \"#00A9E0\" \"#A6E1F4\" \"#FFFFFF\" \"#000000\" usecol(pal = pal_unikn, n = 20)     # extending color palette   #>  [1] \"#008ECE\" \"#009CD7\" \"#04AAE0\" \"#33BAE6\" \"#61C9EB\" \"#89D7F0\" \"#ABE3F4\" #>  [8] \"#C0E9F7\" \"#D6F1FA\" \"#F1FAFD\" \"#F8F8F8\" \"#EAEAEA\" \"#DDDDDD\" \"#CFCFCF\" #> [15] \"#B9B9B9\" \"#9E9E9E\" \"#838383\" \"#686868\" \"#353535\" \"#000000\"  # Mixing a new color palette:  pal_1 <- usecol(pal = c(rev(pal_seeblau), \"white\", pal_pinky))   seecol(pal_1)   # Mixing and extending a color palette:  pal_2 <- usecol(pal = c(rev(pal_seegruen), \"white\", pal_bordeaux), n = 20)   seecol(pal_2)   # Defining and using a custom color palette: pal_princeton_1 <- c(\"#E77500\", \"white\", \"black\") names(pal_princeton_1) <- c(\"orange_w\", \"white\", \"black\")  pal_3 <- usecol(pal_princeton_1, n = 7) seecol(pal_3)   # Removing visual duplicates: usecol(c(\"black\", \"#000000\", \"gray\", \"grey\", \"red\", \"red1\"), distinct = TRUE) #> [1] \"black\" \"gray\"  \"red\"   seecol(usecol(c(pal_unikn, pal_seeblau), distinct = TRUE), title = \"Using distinct colors\")"},{"path":"https://hneth.github.io/unikn/dev/reference/xbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a box (with x) — xbox","title":"Plot a box (with x) — xbox","text":"xbox plots box cross (x) top-right corner.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/xbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a box (with x) — xbox","text":"","code":"xbox(col = Seeblau, dim = c(1, 1), use_x = TRUE)"},{"path":"https://hneth.github.io/unikn/dev/reference/xbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a box (with x) — xbox","text":"col color fill box (.e., background color). Default: col = Seeblau. dim x- y-dimensions box (numeric). Default: dim = c(1, 1) (.e., unit square). use_x Plot cross upper right corner (logical)? Default: use_x = TRUE.","code":""},{"path":"https://hneth.github.io/unikn/dev/reference/xbox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a box (with x) — xbox","text":"cross (x) appears rectangular viewing plot correct aspect ratio (defined dim).","code":""},{"path":[]},{"path":"https://hneth.github.io/unikn/dev/reference/xbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a box (with x) — xbox","text":"","code":"xbox()  # default box   # Options: xbox(col = Bordeaux)  xbox(dim = c(2, 1)) # 2:1 dimension (wider than high)"},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"unikn-1009004","dir":"Changelog","previous_headings":"","what":"unikn 1.0.0.9004","title":"unikn 1.0.0.9004","text":"development version unikn, available https://github.com/hneth/unikn/. version adds functionality fixes bugs. Changes since last release:","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"major-changes-1-0-0-9004","dir":"Changelog","previous_headings":"","what":"Major changes","title":"unikn 1.0.0.9004","text":"Add theme_bwkn() theme_minikn() clean, light, subtle ggplot2 themes.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"minor-changes-1-0-0-9004","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"unikn 1.0.0.9004","text":"Tweak theme_unikn() theme_grau() consistency new ggplot2 themes.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"details-1-0-0-9004","dir":"Changelog","previous_headings":"","what":"Details","title":"unikn 1.0.0.9004","text":"Add DOI 10.5281/zenodo.7096191 citation info Update references unicol R package current development version unikn available https://github.com/hneth/unikn/.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"unikn-100","dir":"Changelog","previous_headings":"","what":"unikn 1.0.0","title":"unikn 1.0.0","text":"CRAN release: 2024-04-16 release unikn (v1.0.0) mostly acknowledges package’s stable state. [2024-04-16] Changes since last release:","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"major-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"unikn 1.0.0","text":"Add scale_x option scale palettes fixed total width; Use list element names pal argument default names.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"minor-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"unikn 1.0.0","text":"url_unikn() prints en-dash, rather figure dash (latter created issues Fedora Linux systems). newpal() provides pattern replacement arguments (allow REGEX operations color names).","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"details-1-0-0","dir":"Changelog","previous_headings":"","what":"Details","title":"unikn 1.0.0","text":"Add new hexagon logo. Deprecate pal = \"add\" keyword seecol(). Reduce number examples image sizes. Update unicol references GitHub CRAN.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"unikn-090","dir":"Changelog","previous_headings":"","what":"unikn 0.9.0","title":"unikn 0.9.0","text":"CRAN release: 2023-08-10 release unikn (v0.9.0) reduces functionality migrating color palettes new R package unicol. [2023-08-09] Changes since last release:","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"major-changes-0-9-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"unikn 0.9.0","text":"Migrated color palettes institutions dedicated R package unicol.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"minor-changes-0-9-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"unikn 0.9.0","text":"Add user feedback newpal() uses col names different lengths. Add is_col_pal() utility function.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"details-0-9-0","dir":"Changelog","previous_headings":"","what":"Details","title":"unikn 0.9.0","text":"Update status badges README. current development version unikn available https://github.com/hneth/unikn/.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"unikn-080","dir":"Changelog","previous_headings":"","what":"unikn 0.8.0","title":"unikn 0.8.0","text":"CRAN release: 2023-01-06 release unikn (v0.8.0) extends functionality additional color palettes. [2023-01-06] Changes since last release:","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"major-changes-0-8-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"unikn 0.8.0","text":"Add color palettes many academic institutions (migrated R package unicol).","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"minor-changes-0-8-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"unikn 0.8.0","text":"Updated color palettes (migrated R package unicol).","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"details-0-8-0","dir":"Changelog","previous_headings":"","what":"Details","title":"unikn 0.8.0","text":"Replace use crayon package use cli package. Add utility functions col_asif_alpha() v_col_asif_alpha(). Revise vignettes. Fix bugs.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"unikn-070","dir":"Changelog","previous_headings":"","what":"unikn 0.7.0","title":"unikn 0.7.0","text":"CRAN release: 2022-11-10 release unikn (v0.7.0) adds improves functionality fixes bugs. [2022-11-10] Changes since last release:","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"major-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"unikn 0.7.0","text":"Add color palettes additional institutions (evaluate seecol(\"add\") palettes). Add type = 'curve' option demopal() evaluating transparent color palettes.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"minor-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"unikn 0.7.0","text":"Align point colors type = \"scatter\" options. Increase robustness allowing alternative type inputs. Pass ... auxiliary functions. Enforce return vectors as_df = FALSE. Revise names enable automatic naming non-named palettes. Handle length(pal) == 1 case types demopal(). Handle alpha = NA case demopal(). Handle pal = NA case seecol() usecol().","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"details-0-7-0","dir":"Changelog","previous_headings":"","what":"Details","title":"unikn 0.7.0","text":"Call contributions user-generated color palettes institutions (see GitHub issue). Fine-tune parameters plotting HEX values seecol(). Reorganize files utility functions. Add Zenodo doi 10.5281/zenodo.7096191 citations. Revise update vignettes.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"unikn-060","dir":"Changelog","previous_headings":"","what":"unikn 0.6.0","title":"unikn 0.6.0","text":"CRAN release: 2022-09-20 release unikn (v0.6.0) adds revises functionality fixes bugs. [2022-09-20] Changes since last release:","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"major-changes-0-6-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"unikn 0.6.0","text":"Add demopal() function illustrating color palettes. xbox(): Add use_x argument hiding showing cross upper right corner (default use_x = TRUE). seecol(): Deprecate title argument replace standard main sub arguments.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"minor-changes-0-6-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"unikn 0.6.0","text":"Enable probabilistic welcoming messages. Enable crayon styles console text.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"details-0-6-0","dir":"Changelog","previous_headings":"","what":"Details","title":"unikn 0.6.0","text":"Add options internal col_distinct() function. Fix bug grepal() caused error color found. Rename utility functions isCol() isHexCol() is_col() is_hex_col(). Distribute color functions separate files.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"unikn-050","dir":"Changelog","previous_headings":"","what":"unikn 0.5.0","title":"unikn 0.5.0","text":"CRAN release: 2022-08-15 release unikn (v0.5.0) adds new functionality fixes bugs. [2022-08-15] Changes since last release:","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"major-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"unikn 0.5.0","text":"Add simcol() function find similar colors. Add ac() function flexible wrapper grDevices::adjustcolor(). Add shades_of() function conveniently get n shades color.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"minor-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"unikn 0.5.0","text":"Add plot argument grepal() simcol() visualize results. Add distinct argument usecol() simcol() remove visual duplicates. Add utility functions obtaining color transparency values (get_alpha()), quantifying color distance (col_distance()), detecting filtering visual duplicates (col_distinct()). Add x_layout argument control horizontal positions text labels (e.g., numeric increments, centering, right-adjusted).","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"details-0-5-0","dir":"Changelog","previous_headings":"","what":"Details","title":"unikn 0.5.0","text":"Fix bugs README vignettes. slide() now uses dim argument.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"unikn-040","dir":"Changelog","previous_headings":"","what":"unikn 0.4.0","title":"unikn 0.4.0","text":"CRAN release: 2021-03-27 release unikn (v0.4.0) adds new functionality, tweaks aesthetics, fixes bug. [2021-03-27] Changes since last release:","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"major-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"unikn 0.4.0","text":"Add grepal() function match patterns names colors() color palettes. Change color sequence pal_unikn_pref increase contrast adjacent colors.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"minor-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"unikn 0.4.0","text":"Add mar_note argument seecol() margin note option. Add two new vignettes (“Color recipes” “Institutional colors”). Fine-tune aesthetics theme_unikn() theme_grau() use ggplot2. Add Travis support GitHub builds.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"details-0-4-0","dir":"Changelog","previous_headings":"","what":"Details","title":"unikn 0.4.0","text":"Adjust display HEX codes seecol(): Show HEX codes two alternating lines (diagonal labels) length codes exceed line length(s).","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"unikn-030","dir":"Changelog","previous_headings":"","what":"unikn 0.3.0","title":"unikn 0.3.0","text":"CRAN release: 2020-08-24 release unikn (v0.3.0) adds functionality fixes bugs. [2020-08-24] Changes since last release:","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"major-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"unikn 0.3.0","text":"Add theme_grau() provide alternative ggplot2 theme.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"minor-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"unikn 0.3.0","text":"Add pal_names argument seecol() function allow re-labeling color palettes colors.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"details-0-3-0","dir":"Changelog","previous_headings":"","what":"Details","title":"unikn 0.3.0","text":"Bug fix: Use seecol() flexibly plot color palettes provided name incomplete names. Revise documentation seecol() usecol() functions. Clean update online documentation.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"unikn-020","dir":"Changelog","previous_headings":"","what":"unikn 0.2.0","title":"unikn 0.2.0","text":"CRAN release: 2019-09-25 version unikn (v0.2.0) maintenance release, adding functionality, primarily fixing bugs. [2019-09-25] Changes since last release:","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"major-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"unikn 0.2.0","text":"New functionality: Add newpal() function defining new color palettes (named vector data frame). Add theme_unikn() function provide basic ggplot2 theme.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"minor-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"unikn 0.2.0","text":"Changes existing functionality: Add col_bg argument seecol() function allow setting background color. Add title argument seecol() function allow overwriting default title (created title = NA). Add lwd_brd argument seecol() function allow setting linewidth shapes (setting sensible defaults combination col_brd).","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"details-0-2-0","dir":"Changelog","previous_headings":"","what":"Details","title":"unikn 0.2.0","text":"Bug fix: Correct error seecol() usecol() prevented use packages (requiring list palettes). Bug fix: Prevent showing duplicate color names seecol(), due searching current set color palettes base R colors(). Different names color now separated forward slash (/), duplicates removed naming. Bug fix: Allow isHexCol() recognize hexadecimal color values starting lowercase letters. Cleanup: Remove packages needed list suggested packages.","code":""},{"path":"https://hneth.github.io/unikn/dev/news/index.html","id":"unikn-010","dir":"Changelog","previous_headings":"","what":"unikn 0.1.0","title":"unikn 0.1.0","text":"CRAN release: 2019-06-15 Initial release unikn (v0.1.0) CRAN: https://CRAN.R-project.org/package=unikn. [2019-06-15] [File NEWS.md updated 2025-09-16.]","code":""}]
